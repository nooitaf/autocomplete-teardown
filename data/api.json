[
    {
        "group": "Teardown scripting",
        "desc": "Teardown uses Lua version 5.1 as scripting language. The Lua 5.1 reference manual can be found ",
        "table": "<table border=0><tr><td class='header'>&nbsp;Function&nbsp;</td><td class='header'>&nbsp;Description</td></tr>==BR==<tr><td class='first' valign='top'>function&nbsp;init()\t\t</td><td valign='top'> Called once at load time</td></tr><tr><td class='first' valign='top'>function&nbsp;tick(dt)\t</td><td valign='top'> Called exactly once per frame. The time step is variable but always between 0.0 and 0.0333333</td></tr><tr><td class='first' valign='top'>function&nbsp;update(dt)&nbsp;</td><td valign='top'> Called at a fixed update rate, but at the most two times per frame. Time step is always 0.0166667 (60 updates per second). Depending on frame rate it might not be called at all for a particular frame.</td></tr><tr><td class='first' valign='top'>function&nbsp;draw()\t\t</td><td valign='top'> Called when the 2D overlay is being draw, after the scene but before the standard HUD. Ui functions can only be used from this callback.</td></tr><table/>",
        "functions": []
    },
    {
        "group": "Parameters",
        "desc": "Scripts can have parameters defined in the level XML file. These serve asinput to a specific instance of the script and can be used to configurevarious options and parameters of the script. While these parameters canbe read at any time in the script, it's recommended to copy them to a globalvariable in or outside the init function.",
        "table": null,
        "functions": [
            {
                "name": "GetIntParam",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Parameter name"
                    },
                    {
                        "name": "default",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Default parameter value"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "number",
                        "desc": "&ndash; Parameter value"
                    }
                ],
                "example": "--Retrieve blinkcount parameter, or set to 5 if omitted\nparameterBlinkCount = GetIntParameter(\"blinkcount\", 5)"
            },
            {
                "name": "GetFloatParam",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Parameter name"
                    },
                    {
                        "name": "default",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Default parameter value"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "number",
                        "desc": "&ndash; Parameter value"
                    }
                ],
                "example": "--Retrieve speed parameter, or set to 10.0 if omitted\nparameterSpeed = GetFloatParameter(\"speed\", 10.0)"
            },
            {
                "name": "GetBoolParam",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Parameter name"
                    },
                    {
                        "name": "default",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; Default parameter value"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "boolean",
                        "desc": "&ndash; Parameter value"
                    }
                ],
                "example": "--Retrieve playsound parameter, or false if omitted\nparameterPlaySound = GetBoolParameter(\"playsound\", false)"
            },
            {
                "name": "GetStringParam",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Parameter name"
                    },
                    {
                        "name": "default",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Default parameter value"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "string",
                        "desc": "&ndash; Parameter value"
                    }
                ],
                "example": "--Retrieve mode parameter, or \"idle\" if omitted\nparameterMode = GetSrtingParameter(\"mode\", \"idle\")"
            }
        ]
    },
    {
        "group": "Script control",
        "desc": "General functions that control the operation and flow of the script.",
        "table": "<table border=0><tr><td class='header'>&nbsp;Input&nbsp;identifier&nbsp;</td><td class='header'>&nbsp;Description</td></tr>==BR==<tr><td class='first' valign='top'>esc\t\t\t</td><td valign='top'> Escape key</td></tr><tr><td class='first' valign='top'>lmb\t\t\t</td><td valign='top'> Left mouse button</td></tr><tr><td class='first' valign='top'>rmb\t\t\t</td><td valign='top'> Right mouse button</td></tr><tr><td class='first' valign='top'>up\t\t\t</td><td valign='top'> Up key</td></tr><tr><td class='first' valign='top'>down\t\t</td><td valign='top'> Down key</td></tr><tr><td class='first' valign='top'>left\t\t</td><td valign='top'> Left key</td></tr><tr><td class='first' valign='top'>right\t\t</td><td valign='top'> Right key</td></tr><tr><td class='first' valign='top'>space\t\t</td><td valign='top'> Space bar</td></tr><tr><td class='first' valign='top'>shift\t\t</td><td valign='top'> Shift key</td></tr><tr><td class='first' valign='top'>ctrl\t\t</td><td valign='top'> Ctrl key</td></tr><tr><td class='first' valign='top'>interact\t</td><td valign='top'> Interact key</td></tr><tr><td class='first' valign='top'>return\t\t</td><td valign='top'> Return key</td></tr><tr><td class='first' valign='top'>any\t\t\t</td><td valign='top'> Any key or button</td></tr><tr><td class='first' valign='top'>a,b,c,...\t</td><td valign='top'> Latin, alphabetical keys a through z</td></tr><tr><td class='first' valign='top'>mousewheel\t</td><td valign='top'> Mouse wheel. Only valid in InputValue.</td></tr><tr><td class='first' valign='top'>mousedx\t\t</td><td valign='top'> Mouse horizontal diff. Only valid in InputValue.</td></tr><tr><td class='first' valign='top'>mousedy\t\t</td><td valign='top'> Mouse vertical diff. Only valid in InputValue.</td></tr><table/>",
        "functions": [
            {
                "name": "GetVersion",
                "args": [],
                "return": [
                    {
                        "name": "version",
                        "type": "string",
                        "desc": "&ndash; Dot separated string of current version of the game"
                    }
                ],
                "example": "local v = GetVersion()\n--v is \"0.5.0\""
            },
            {
                "name": "HasVersion",
                "args": [
                    {
                        "name": "version",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Reference version"
                    }
                ],
                "return": [
                    {
                        "name": "match",
                        "type": "boolean",
                        "desc": "&ndash; True if current version is at least provided one"
                    }
                ],
                "example": "if HasVersion(\"0.6.0\") then\n\t--conditional code that only works on 0.6.0 or above\nelse\n\t--legacy code that works on earlier versions\nend"
            },
            {
                "name": "GetTime",
                "args": [],
                "info": "Returns running time of this script. If called from update, this returns\nthe simulated time, otherwise it returns wall time.",
                "return": [
                    {
                        "name": "time",
                        "type": "number",
                        "desc": "&ndash; The time in seconds since level was started"
                    }
                ],
                "example": "local t = GetTime()"
            },
            {
                "name": "GetTimeStep",
                "args": [],
                "info": "Returns timestep of the last frame. If called from update, this returns\nthe simulation time step, which is always one 60th of a second (0.0166667).\nIf called from tick or draw it returns the actual time since last frame.",
                "return": [
                    {
                        "name": "dt",
                        "type": "number",
                        "desc": "&ndash; The timestep in seconds"
                    }
                ],
                "example": "local dt = GetTimeStep()"
            },
            {
                "name": "InputPressed",
                "args": [
                    {
                        "name": "input",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; The input identifier"
                    }
                ],
                "return": [
                    {
                        "name": "pressed",
                        "type": "boolean",
                        "desc": "&ndash; True if input was pressed during last frame"
                    }
                ],
                "example": "if InputPressed(\"interact\") then\n\t...\nend"
            },
            {
                "name": "InputReleased",
                "args": [
                    {
                        "name": "input",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; The input identifier"
                    }
                ],
                "return": [
                    {
                        "name": "pressed",
                        "type": "boolean",
                        "desc": "&ndash; True if input was released during last frame"
                    }
                ],
                "example": "if InputReleased(\"interact\") then\n\t...\nend"
            },
            {
                "name": "InputDown",
                "args": [
                    {
                        "name": "input",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; The input identifier"
                    }
                ],
                "return": [
                    {
                        "name": "pressed",
                        "type": "boolean",
                        "desc": "&ndash; True if input is currently held down"
                    }
                ],
                "example": "if InputDown(\"interact\") then\n...\nend"
            },
            {
                "name": "InputValue",
                "args": [
                    {
                        "name": "input",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; The input identifier"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "number",
                        "desc": "&ndash; Depends on input type"
                    }
                ],
                "example": "scrollPos = scrollPos + InputValue(\"mousewheel\")"
            },
            {
                "name": "SetValue",
                "args": [
                    {
                        "name": "variable",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Name of number variable in the global context"
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; The new value"
                    },
                    {
                        "name": "transition",
                        "type": "string",
                        "optional": true,
                        "desc": "&ndash; Transition type. See description."
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Transition time (seconds)"
                    }
                ],
                "info": "Set value of a number variable in the global context with an optional transition.\nIf a transition is provided the value will animate from current value to the new value during the transition time.\nTransition can be one of the following:\n<table border=0><tr><td class='header'>&nbsp;Transition&nbsp;</td><td class='header'>&nbsp;Description</td></tr>\n<tr><td class='first' valign='top'>linear\t</td><td valign='top'> Linear transition</td></tr><tr><td class='first' valign='top'>cosine\t</td><td valign='top'> Slow at beginning and end</td></tr><tr><td class='first' valign='top'>easein\t</td><td valign='top'> Slow at beginning</td></tr><tr><td class='first' valign='top'>easeout\t</td><td valign='top'> Slow at end</td></tr><tr><td class='first' valign='top'>bounce\t</td><td valign='top'> Bounce and overshoot new value</td></tr><table/>",
                "return": [],
                "example": "myValue = 0\nSetValue(\"myValue\", 1, \"linear\", 0.5)\n\nThis will change the value of myValue from 0 to 1 in a linear fasion over 0.5 seconds"
            },
            {
                "name": "StartLevel",
                "args": [
                    {
                        "name": "mission",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; An identifier of your choice"
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to level XML file"
                    },
                    {
                        "name": "layers",
                        "type": "string",
                        "optional": true,
                        "desc": "&ndash; Active layers. Default is no layers."
                    }
                ],
                "info": "Start a level",
                "return": [],
                "example": "--Start level with no active layers\nStartLevel(\"level1\", \"MOD/level1.xml\")\n\n--Start level with two layers\nStartLevel(\"level1\", \"MOD/level1.xml\", \"vehicles targets\")"
            },
            {
                "name": "SetPaused",
                "args": [
                    {
                        "name": "paused",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; True if game should be paused"
                    }
                ],
                "info": "Set paused state of the game",
                "return": [],
                "example": "--Pause game and bring up pause menu on HUD\nSetPaused(true)"
            },
            {
                "name": "Restart",
                "args": [],
                "info": "Restart level",
                "return": [],
                "example": "if shouldRestart then\nRestart()\nend"
            },
            {
                "name": "Menu",
                "args": [],
                "info": "Go to main menu",
                "return": [],
                "example": "if shouldExitLevel then\nMenu()\nend"
            }
        ]
    },
    {
        "group": "Registry",
        "desc": "The Teardown engine uses a global key/value-pair registry that scriptscan read and write. The engine exposes a lot of internal information throughthe registry, but it can also be used as way for scripts to communicate witheach other.<p>The registry is a hierarchical node structure and can store a value in each node (parent nodes can also have a value).The values can be of type floating point number, integer, boolean or string, but all types are automatically converted if another type is requested.Some registry nodes are reserved and used for special purposes.",
        "table": "<table border=0><tr><td class='header'>&nbsp;Key\t</td><td class='header'>&nbsp;Description</td></tr>==BR==<tr><td class='first' valign='top'>options\t\t\t</td><td valign='top'> reserved for game settings (write protected from mods)</td></tr><tr><td class='first' valign='top'>game\t\t\t</td><td valign='top'> reserved for the game engine internals (see documentation)</td></tr><tr><td class='first' valign='top'>savegame\t\t</td><td valign='top'> used for persistent game data (write protected for mods)</td></tr><tr><td class='first' valign='top'>savegame.mod\t</td><td valign='top'> used for persistent mod data</td></tr><tr><td class='first' valign='top'>level\t\t\t</td><td valign='top'> not reserved, but recommended for level specific entries and script communication</td></tr><table/>",
        "functions": [
            {
                "name": "ClearKey",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key to clear"
                    }
                ],
                "info": "Remove registry node, including all child nodes.",
                "return": [],
                "example": "--If the registry looks like this:\n--\tscore\n--\t\tlevels\n--\t\t\tlevel1 = 5\n--\t\t\tlevel2 = 4\n\nClearKey(\"score.levels\")\n\n--Afterwards, the registry will look like this:\n--\tscore"
            },
            {
                "name": "ListKeys",
                "args": [
                    {
                        "name": "parent",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; The parent registry key"
                    }
                ],
                "info": "List all child keys of a registry node.",
                "return": [
                    {
                        "name": "children",
                        "type": "table",
                        "desc": "&ndash; Indexed table of strings with child keys"
                    }
                ],
                "example": "--If the registry looks like this:\n--\tscore\n--\t\tlevels\n--\t\t\tlevel1 = 5\n--\t\t\tlevel2 = 4\n\nlocal list = ListKeys(\"score.levels\")\nfor i=1, #list do\n\tprint(list[i])\nend\n\n--This will output:\n--level1\n--level2"
            },
            {
                "name": "HasKey",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    }
                ],
                "info": "Returns true if the registry contains a certain key",
                "return": [
                    {
                        "name": "exists",
                        "type": "boolean",
                        "desc": "&ndash; True if key exists"
                    }
                ],
                "example": "local foo = HasKey(\"score.levels\")"
            },
            {
                "name": "SetInt",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Desired value"
                    }
                ],
                "return": [],
                "example": "SetInt(\"score.levels.level1\", 4)"
            },
            {
                "name": "GetInt",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "number",
                        "desc": "&ndash; Integer value of registry node or zero if not found"
                    }
                ],
                "example": "local a = GetInt(\"score.levels.level1\")"
            },
            {
                "name": "SetFloat",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Desired value"
                    }
                ],
                "return": [],
                "example": "SetFloat(\"level.time\", 22.3)"
            },
            {
                "name": "GetFloat",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "number",
                        "desc": "&ndash; Float value of registry node or zero if not found"
                    }
                ],
                "example": "local time = GetFloat(\"level.time\")"
            },
            {
                "name": "SetBool",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    },
                    {
                        "name": "value",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; Desired value"
                    }
                ],
                "return": [],
                "example": "SetBool(\"level.robots.enabled\", true)"
            },
            {
                "name": "GetBool",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "boolean",
                        "desc": "&ndash; Boolean value of registry node or false if not found"
                    }
                ],
                "example": "local isRobotsEnabled = GetBool(\"level.robots.enabled\")"
            },
            {
                "name": "SetString",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Desired value"
                    }
                ],
                "return": [],
                "example": "SetBool(\"level.name\", \"foo\")"
            },
            {
                "name": "GetString",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Registry key"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "string",
                        "desc": "&ndash; String value of registry node or \"\" if not found"
                    }
                ],
                "example": "local name = GetString(\"level.name\")"
            }
        ]
    },
    {
        "group": "Vector math",
        "desc": "Vector math is used in Teardown scripts to represent 3D positions, directions,rotations and transforms. The base types are vectors, quaternions and transforms.Vectors and quaternions are indexed tables with three and four components. Transformsare tables consisting of one vector (pos) and one quaternion (rot)",
        "table": null,
        "functions": [
            {
                "name": "Vec",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; X value"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Y value"
                    },
                    {
                        "name": "z",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Z value"
                    }
                ],
                "info": "Create new vector and optionally initializes it to the provided values.\nA Vec is equivalent to a regular lua table with three numbers.",
                "return": [
                    {
                        "name": "vec",
                        "type": "table",
                        "desc": "&ndash; New vector"
                    }
                ],
                "example": "--These are equivalent\nlocal a1 = Vec()\nlocal a2 = {0, 0, 0}\n\n--These are equivalent\nlocal b1 = Vec(0, 1, 0)\nlocal b2 = {0, 1, 0}"
            },
            {
                "name": "VecCopy",
                "args": [
                    {
                        "name": "org",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; A vector"
                    }
                ],
                "info": "Vectors should never be assigned like regular numbers. Since they are\nimplemented with lua tables assignment means two references pointing to\nthe same data. Use this function instead.",
                "return": [
                    {
                        "name": "new",
                        "type": "table",
                        "desc": "&ndash; Copy of org vector"
                    }
                ],
                "example": "--Do this to assign a vector\nlocal right1 = Vec(1, 2, 3)\nlocal right2 = VecCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = Vec(1, 2, 3)\nlocal wrong2 = wrong1"
            },
            {
                "name": "VecLength",
                "args": [
                    {
                        "name": "vec",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; A vector"
                    }
                ],
                "return": [
                    {
                        "name": "length",
                        "type": "number",
                        "desc": "&ndash; Length (magnitude) of the vector"
                    }
                ],
                "example": "local v = Vec(1,1,0)\nlocal l = VecLength(v)\n\n--l now equals 1.41421356"
            },
            {
                "name": "VecNormalize",
                "args": [
                    {
                        "name": "vec",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; A vector"
                    }
                ],
                "info": "If the input vector is of zero length, the function returns {0,0,1}",
                "return": [
                    {
                        "name": "norm",
                        "type": "table",
                        "desc": "&ndash; A vector of length 1.0"
                    }
                ],
                "example": "local v = Vec(0,3,0)\nlocal n = VecNormalize(v)\n\n--n now equals {0,1,0}"
            },
            {
                "name": "VecScale",
                "args": [
                    {
                        "name": "vec",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; A vector"
                    },
                    {
                        "name": "scale",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; A scale factor"
                    }
                ],
                "return": [
                    {
                        "name": "norm",
                        "type": "table",
                        "desc": "&ndash; A scaled version of input vector"
                    }
                ],
                "example": "local v = Vec(1,2,3)\nlocal n = VecScale(v, 2)\n\n--n now equals {2,4,6}"
            },
            {
                "name": "VecAdd",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    }
                ],
                "return": [
                    {
                        "name": "c",
                        "type": "table",
                        "desc": "&ndash; New vector with sum of a and b"
                    }
                ],
                "example": "local a = Vec(1,2,3)\nlocal b = Vec(3,0,0)\nlocal c = VecAdd(a, b)\n\n--c now equals {4,2,3}"
            },
            {
                "name": "VecSub",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    }
                ],
                "return": [
                    {
                        "name": "c",
                        "type": "table",
                        "desc": "&ndash; New vector representing a-b"
                    }
                ],
                "example": "local a = Vec(1,2,3)\nlocal b = Vec(3,0,0)\nlocal c = VecSub(a, b)\n\n--c now equals {-2,2,3}"
            },
            {
                "name": "VecDot",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    }
                ],
                "return": [
                    {
                        "name": "c",
                        "type": "number",
                        "desc": "&ndash; Dot product of a and b"
                    }
                ],
                "example": "local a = Vec(1,2,3)\nlocal b = Vec(3,1,0)\nlocal c = VecDot(a, b)\n\n--c now equals 5"
            },
            {
                "name": "VecCross",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    }
                ],
                "return": [
                    {
                        "name": "c",
                        "type": "table",
                        "desc": "&ndash; Cross product of a and b (also called vector product)"
                    }
                ],
                "example": "local a = Vec(1,0,0)\nlocal b = Vec(0,1,0)\nlocal c = VecCross(a, b)\n\n--c now equals {0,0,1}"
            },
            {
                "name": "VecLerp",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    },
                    {
                        "name": "t",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; fraction (usually between 0.0 and 1.0)"
                    }
                ],
                "return": [
                    {
                        "name": "c",
                        "type": "table",
                        "desc": "&ndash; Linearly interpolated vector between a and b, using t"
                    }
                ],
                "example": "local a = Vec(2,0,0)\nlocal b = Vec(0,4,2)\nlocal t = 0.5\n\n--These two are equivalent\nlocal c1 = VecLerp(a, b, t)\nlcoal c2 = VecAdd(VecScale(a, 1-t), VecScale(b, t))\n\n--c1 and c2 now equals {1, 2, 1}"
            },
            {
                "name": "Quat",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; X value"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Y value"
                    },
                    {
                        "name": "z",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Z value"
                    },
                    {
                        "name": "w",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; W value"
                    }
                ],
                "info": "Create new quaternion and optionally initializes it to the provided values.\nDo not attempt to initialize a quaternion with raw values unless you know\nwhat you are doing. Use QuatEuler or QuatAxisAngle instead.\nIf no arguments are given, a unit quaternion will be created: {0, 0, 0, 1}.\nA quaternion is equivalent to a regular lua table with four numbers.",
                "return": [
                    {
                        "name": "quat",
                        "type": "table",
                        "desc": "&ndash; New quaternion"
                    }
                ],
                "example": "--These are equivalent\nlocal a1 = Quat()\nlocal a2 = {0, 0, 0, 1}"
            },
            {
                "name": "QuatCopy",
                "args": [
                    {
                        "name": "org",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Quaternion"
                    }
                ],
                "info": "Quaternions should never be assigned like regular numbers. Since they are\nimplemented with lua tables assignment means two references pointing to\nthe same data. Use this function instead.",
                "return": [
                    {
                        "name": "new",
                        "type": "table",
                        "desc": "&ndash; Copy of org quaternion"
                    }
                ],
                "example": "--Do this to assign a quaternion\nlocal right1 = QuatEuler(0, 90, 0)\nlocal right2 = QuatCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = QuatEuler(0, 90, 0)\nlocal wrong2 = wrong1"
            },
            {
                "name": "QuatAxisAngle",
                "args": [
                    {
                        "name": "axis",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Rotation axis, unit vector"
                    },
                    {
                        "name": "angle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Rotation angle in degrees"
                    }
                ],
                "info": "Create a quaternion representing a rotation around a specific axis",
                "return": [
                    {
                        "name": "quat",
                        "type": "table",
                        "desc": "&ndash; New quaternion"
                    }
                ],
                "example": "--Create quaternion representing rotation 30 degrees around Y axis\nlocal q = QuatAxisAngle(Vec(0,1,0), 30)"
            },
            {
                "name": "QuatEuler",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Angle around X axis in degrees, sometimes also called roll or bank"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Angle around Y axis in degrees, sometimes also called yaw or heading"
                    },
                    {
                        "name": "z",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Angle around Z axis in degrees, sometimes also called pitch or attitude"
                    }
                ],
                "info": "Create quaternion using euler angle notation. The order of applied rotations uses the\n\"NASA standard aeroplane\" model:\n<ol>\n<li>Rotation around Y axis (yaw or heading)</li>\n<li>Rotation around Z axis (pitch or attitude)</li>\n<li>Rotation around X axis (roll or bank)</li>\n</ol>",
                "return": [
                    {
                        "name": "quat",
                        "type": "table",
                        "desc": "&ndash; New quaternion"
                    }
                ],
                "example": "--Create quaternion representing rotation 30 degrees around Y axis and 25 degrees around Z axis\nlocal q = QuatEuler(0, 30, 25)"
            },
            {
                "name": "QuatLookAt",
                "args": [
                    {
                        "name": "eye",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector representing the camera location"
                    },
                    {
                        "name": "target",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector representing the point to look at"
                    }
                ],
                "info": "Create a quaternion pointing the negative Z axis (forward) towards\na specific point, keeping the Y axis upwards. This is very useful\nfor creating camera transforms.",
                "return": [
                    {
                        "name": "quat",
                        "type": "table",
                        "desc": "&ndash; New quaternion"
                    }
                ],
                "example": "local eye = Vec(0, 10, 0)\nlocal target = Vec(0, 1, 5)\nlocal rot = QuatLookAt(eye, target)\nSetCameraTransform(Transform(eye, rot))"
            },
            {
                "name": "QuatSlerp",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Quaternion"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Quaternion"
                    },
                    {
                        "name": "t",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; fraction (usually between 0.0 and 1.0)"
                    }
                ],
                "info": "Spherical, linear interpolation between a and b, using t. This is\nvery useful for animating between two rotations.",
                "return": [
                    {
                        "name": "c",
                        "type": "table",
                        "desc": "&ndash; New quaternion"
                    }
                ],
                "example": "local a = QuatEuler(0, 10, 0)\nlocal b = QuatEuler(0, 0, 45)\n\n--Create quaternion half way between a and b\nlocal q = QuatSlerp(a, b, 0.5)"
            },
            {
                "name": "QuatRotateQuat",
                "args": [
                    {
                        "name": "a",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Quaternion"
                    },
                    {
                        "name": "b",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Quaternion"
                    }
                ],
                "info": "Rotate one quaternion with another quaternion. This is mathematically\nequivalent to c = a * b using quaternion multiplication.",
                "return": [
                    {
                        "name": "c",
                        "type": "table",
                        "desc": "&ndash; New quaternion"
                    }
                ],
                "example": "local a = QuatEuler(0, 10, 0)\nlocal b = QuatEuler(0, 0, 45)\nlocal q = QuatRotateQuat(a, b)\n\n--q now represents a rotation first 10 degrees around\n--the Y axis and then 45 degrees around the Z axis."
            },
            {
                "name": "Transform",
                "args": [
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": true,
                        "desc": "&ndash; Vector representing transform position"
                    },
                    {
                        "name": "rot",
                        "type": "table",
                        "optional": true,
                        "desc": "&ndash; Quaternion representing transform rotation"
                    }
                ],
                "info": "A transform is a regular lua table with two entries: pos and rot,\na vector and quaternion representing transform position and rotation.",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; New transform"
                    }
                ],
                "example": "--Create transform located at {0, 0, 0} with no rotation\nlocal t1 = Transform()\n\n--Create transform located at {10, 0, 0} with no rotation\nlocal t2 = Transform(Vec(10, 0,0))\n\n--Create transform located at {10, 0, 0}, rotated 45 degrees around Y axis\nlocal t2 = Transform(Vec(10, 0,0), QuatEuler(0, 45, 0))"
            },
            {
                "name": "TransformCopy",
                "args": [
                    {
                        "name": "org",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    }
                ],
                "info": "Transforms should never be assigned like regular numbers. Since they are\nimplemented with lua tables assignment means two references pointing to\nthe same data. Use this function instead.",
                "return": [
                    {
                        "name": "new",
                        "type": "table",
                        "desc": "&ndash; Copy of org transform"
                    }
                ],
                "example": "--Do this to assign a quaternion\nlocal right1 = Transform(Vec(1,0,0), QuatEuler(0, 90, 0))\nlocal right2 = TransformCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = Transform(Vec(1,0,0), QuatEuler(0, 90, 0))\nlocal wrong2 = wrong1"
            },
            {
                "name": "TransformToParentTransform",
                "args": [
                    {
                        "name": "parent",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "child",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    }
                ],
                "info": "Transform child transform out of the parent transform.\nThis is the opposite of TransformToLocalTransform.",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; New transform"
                    }
                ],
                "example": "local b = GetBodyTransform(body)\nlocal s = GetShapeLocalTransform(shape)\n\n--b represents the location of body in world space\n--s represents the location of shape in body space\n\nlocal w = TransformToParentTransform(b, s)\n\n--w now represents the location of shape in world space"
            },
            {
                "name": "TransformToLocalTransform",
                "args": [
                    {
                        "name": "parent",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "child",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    }
                ],
                "info": "Transform one transform into the local space of another transform.\nThis is the opposite of TransformToParentTransform.",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; New transform"
                    }
                ],
                "example": "local b = GetBodyTransform(body)\nlocal w = GetShapeWorldTransform(shape)\n\n--b represents the location of body in world space\n--w represents the location of shape in world space\n\nlocal s = TransformToLocalTransform(b, w)\n\n--s now represents the location of shape in body space."
            },
            {
                "name": "TransformToParentVec",
                "args": [
                    {
                        "name": "t",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "v",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    }
                ],
                "info": "Transfom vector v out of transform t only considering rotation.",
                "return": [
                    {
                        "name": "r",
                        "type": "table",
                        "desc": "&ndash; Transformed vector"
                    }
                ],
                "example": "local t = GetBodyTransform(body)\nlocal localUp = Vec(0, 1, 0)\nlocal up = TransformToParentVec(t, localUp)\n\n--up now represents the local body up direction in world space"
            },
            {
                "name": "TransformToLocalVec",
                "args": [
                    {
                        "name": "t",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "v",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector"
                    }
                ],
                "info": "Transfom vector v into transform t only considering rotation.",
                "return": [
                    {
                        "name": "r",
                        "type": "table",
                        "desc": "&ndash; Transformed vector"
                    }
                ],
                "example": "local t = GetBodyTransform(body)\nlocal worldUp = Vec(0, 1, 0)\nlocal up = TransformToLocalVec(t, worldUp)\n\n--up now represents the world up direction in local body space"
            },
            {
                "name": "TransformToParentPoint",
                "args": [
                    {
                        "name": "t",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "p",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector representing position"
                    }
                ],
                "info": "Transfom position p out of transform t.",
                "return": [
                    {
                        "name": "r",
                        "type": "table",
                        "desc": "&ndash; Transformed position"
                    }
                ],
                "example": "local t = GetBodyTransform(body)\nlocal bodyPoint = Vec(0, 0, -1)\nlocal p = TransformToParentPoint(t, bodyPoint)\n\n--p now represents the local body point {0, 0, -1 } in world space"
            },
            {
                "name": "TransformToLocalPoint",
                "args": [
                    {
                        "name": "t",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "p",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector representing position"
                    }
                ],
                "info": "Transfom position p into transform t.",
                "return": [
                    {
                        "name": "r",
                        "type": "table",
                        "desc": "&ndash; Transformed position"
                    }
                ],
                "example": "local t = GetBodyTransform(body)\nlocal worldOrigo = Vec(0, 0, 0)\nlocal p = TransformToLocalPoint(t, worldOrigo)\n\n--p now represents the position of world origo in local body space"
            }
        ]
    },
    {
        "group": "Entity",
        "desc": "An Entity is the basis of most objects in the Teardown engine (bodies, shapes, lights, locations, etc). All entities can have tags, which is a way to store custom properties on entities for scripting purposes.Some tags are also reserved for engine use. See documentation for details.",
        "table": null,
        "functions": [
            {
                "name": "SetTag",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    },
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "optional": true,
                        "desc": "&ndash; Tag value"
                    }
                ],
                "return": [],
                "example": "--Add \"special\" tag to an entity\nSetTag(handle, \"special\")\n\n--Add \"team\" tag to an entity and give it value \"red\"\nSetTag(handle, \"team\", \"red\")"
            },
            {
                "name": "RemoveTag",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    },
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    }
                ],
                "info": "Remove tag from an entity. If the tag had a value it is removed too.",
                "return": [],
                "example": "RemoveTag(handle, \"special\")"
            },
            {
                "name": "HasTag",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    },
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    }
                ],
                "return": [
                    {
                        "name": "exists",
                        "type": "boolean",
                        "desc": "&ndash; Returns true if entity has tag"
                    }
                ],
                "example": "SetTag(handle, \"special\")\nlocal hasSpecial = HasTag(handle, \"special\") \n-- hasSpecial will be true"
            },
            {
                "name": "GetTagValue",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    },
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "string",
                        "desc": "&ndash; Returns the tag value, if any. Empty string otherwise."
                    }
                ],
                "example": "\nSetTag(handle, \"special\")\nvalue = GetTagValue(handle, \"special\")\n-- value will be \"\"\n\nSetTag(handle, \"special\", \"foo\")\nvalue = GetTagValue(handle, \"special\")\n-- value will be \"foo\""
            },
            {
                "name": "GetDescription",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    }
                ],
                "info": "All entities can have an associated description. For bodies and\nshapes this can be provided through the editor. This function \nretrieves that description.",
                "return": [
                    {
                        "name": "description",
                        "type": "string",
                        "desc": "&ndash; The description string"
                    }
                ],
                "example": "local desc = GetDescription(body)"
            },
            {
                "name": "SetDescription",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; The description string"
                    }
                ],
                "info": "All entities can have an associated description. The description for \nbodies and shapes will show up on the HUD when looking at them.",
                "return": [],
                "example": "SetDescription(body, \"Target object\")"
            },
            {
                "name": "Delete",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    }
                ],
                "info": "Remove an entity from the scene. All entities owned by this entity\nwill also be removed.",
                "return": [],
                "example": "Delete(body)\n--All shapes associated with body will also be removed"
            },
            {
                "name": "IsHandleValid",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Entity handle"
                    }
                ],
                "return": [
                    {
                        "name": "exists",
                        "type": "boolean",
                        "desc": "&ndash; Returns true if the entity pointed to by handle still exists"
                    }
                ],
                "example": "valid = IsHandleValid(body)\n\n--valid is true if body still exists\n\nDelete(body)\nvalid = IsHandleValid(body)\n\n--valid will now be false"
            }
        ]
    },
    {
        "group": "Body",
        "desc": "A body represents a rigid body in the scene. It can be either static or dynamic. Only dynamic bodies areaffected by physics.",
        "table": null,
        "functions": [
            {
                "name": "FindBody",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first body with specified tag or zero if not found"
                    }
                ],
                "example": "--Search for a body tagged \"target\" in script scope\nlocal target = FindBody(\"target\")\n\n--Search for a body tagged \"escape\" in entire scene\nlocal escape = FindBody(\"escape\", true)"
            },
            {
                "name": "FindBodies",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all bodies with specified tag"
                    }
                ],
                "example": "--Search for bodies tagged \"target\" in script scope\nlocal targets = FindBodies(\"target\")\nfor i=1, #targets do\n\tlocal target = targets[i]\n\t...\nend"
            },
            {
                "name": "GetBodyTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Transform of the body"
                    }
                ],
                "example": "local t = GetBodyTransform(body)"
            },
            {
                "name": "SetBodyTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    },
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Desired transform"
                    }
                ],
                "return": [],
                "example": "--Move a body 1 meter upwards\nlocal t = GetBodyTransform(body)\nt.pos = VecAdd(t.pos, Vec(0, 1, 0))\nSetBodyTransform(body, t)"
            },
            {
                "name": "GetBodyMass",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "return": [
                    {
                        "name": "mass",
                        "type": "number",
                        "desc": "&ndash; Body mass. Static bodies always return zero mass."
                    }
                ],
                "example": "local mass = GetBodyMass(body)"
            },
            {
                "name": "IsBodyDynamic",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Check if body is dynamic. Note that something that was created static \nmay become dynamic due to destruction.",
                "return": [
                    {
                        "name": "dynamic",
                        "type": "boolean",
                        "desc": "&ndash; Return true if body is dynamic"
                    }
                ],
                "example": "local dynamic = IsBodyDynamic(body)"
            },
            {
                "name": "SetBodyDynamic",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    },
                    {
                        "name": "dynamic",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; True for dynamic. False for static."
                    }
                ],
                "info": "Change the dynamic state of a body. There is very limited use for this\nfunction. In most situations you should leave it up to the engine to decide.\nUse with caution.",
                "return": [],
                "example": "SetBodyDynamic(body, false)"
            },
            {
                "name": "SetBodyVelocity",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle (should be a dynamic body)"
                    },
                    {
                        "name": "velocity",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector with linear velocity"
                    }
                ],
                "info": "This can be used for animating bodies with preserved physical interaction,\nbut in most cases you are better off with a motorized joint instead.",
                "return": [],
                "example": "local vel = Vec(2,0,0)\nSetBodyVelocity(body, vel)"
            },
            {
                "name": "GetBodyVelocity",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle (should be a dynamic body)"
                    }
                ],
                "return": [
                    {
                        "name": "velocity",
                        "type": "table",
                        "desc": "&ndash; Linear velocity as vector"
                    }
                ],
                "example": "local linVel = GetBodyVelocity(body)"
            },
            {
                "name": "GetBodyVelocityAtPos",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle (should be a dynamic body)"
                    },
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    }
                ],
                "info": "Return the velocity on a body taking both linear and angular velocity into account.",
                "return": [
                    {
                        "name": "velocity",
                        "type": "table",
                        "desc": "&ndash; Linear velocity on body at pos as vector"
                    }
                ],
                "example": "local vel = GetBodyVelocityAtPos(body, pos)"
            },
            {
                "name": "SetBodyAngularVelocity",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle (should be a dynamic body)"
                    },
                    {
                        "name": "angVel",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Vector with angular velocity"
                    }
                ],
                "info": "This can be used for animating bodies with preserved physical interaction,\nbut in most cases you are better off with a motorized joint instead.",
                "return": [],
                "example": "local angVel = Vec(2,0,0)\nSetBodyAngularVelocity(body, angVel)"
            },
            {
                "name": "GetBodyAngularVelocity",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle (should be a dynamic body)"
                    }
                ],
                "return": [
                    {
                        "name": "angVel",
                        "type": "table",
                        "desc": "&ndash; Angular velocity as vector"
                    }
                ],
                "example": "local angVel = GetBodyAngularVelocity(body)"
            },
            {
                "name": "IsBodyActive",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Check if body is body is currently simulated. For performance reasons,\nbodies that don't move are taken out of the simulation. This function\ncan be used to query the active state of a specific body. Only dynamic\nbodies can be active.",
                "return": [
                    {
                        "name": "active",
                        "type": "boolean",
                        "desc": "&ndash; Return true if body is active"
                    }
                ],
                "example": "if IsBodyActive(body) then\n\t...\nend"
            },
            {
                "name": "ApplyBodyImpulse",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle (should be a dynamic body)"
                    },
                    {
                        "name": "position",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space position as vector"
                    },
                    {
                        "name": "velocity",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space impulse as vector"
                    }
                ],
                "info": "Apply impulse to dynamic body at position (give body a push).",
                "return": [],
                "example": "local pos = Vec(0,1,0)\nlocal imp = Vec(0,0,10)\nApplyBodyImpulse(body, pos, imp)"
            },
            {
                "name": "GetBodyShapes",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Return handles to all shapes owned by a body",
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table of shape handles"
                    }
                ],
                "example": "local shapes = GetBodyShapes(body)\nfor i=1,#shapes do\n\tlocal shape = shapes[i]\nend"
            },
            {
                "name": "GetBodyVehicle",
                "args": [
                    {
                        "name": "body",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Get parent vehicle for body, or zero if not part of vehicle"
                    }
                ],
                "example": "local vehicle = GetBodyVehicle(body)"
            },
            {
                "name": "GetBodyBounds",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Return the world space, axis-aligned bounding box for a body.",
                "return": [
                    {
                        "name": "min",
                        "type": "table",
                        "desc": "&ndash; Vector representing the AABB lower bound"
                    },
                    {
                        "name": "max",
                        "type": "table",
                        "desc": "&ndash; Vector representing the AABB upper bound"
                    }
                ],
                "example": "local min, max = GetBodyBounds(body)\nlocal boundsSize = VecSub(max, min)\nlocal center = VecLerp(min, max, 0.5)"
            },
            {
                "name": "GetBodyCenterOfMass",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "return": [
                    {
                        "name": "point",
                        "type": "table",
                        "desc": "&ndash; Vector representing local center of mass in body space"
                    }
                ],
                "example": "--Visualize center of mass on for body\nlocal com = GetBodyCenterOfMass(body)\nlocal worldPoint = TransformToParentPoint(GetBodyTransform(body), com)\nDebugCross(worldPoint)"
            },
            {
                "name": "IsBodyVisible",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    },
                    {
                        "name": "maxDist",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Maximum visible distance"
                    },
                    {
                        "name": "rejectTransparent",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; See through transparent materials. Default false."
                    }
                ],
                "info": "This will check if a body is currently visible in the camera frustum and\nnot occluded by other objects.",
                "return": [
                    {
                        "name": "visible",
                        "type": "boolean",
                        "desc": "&ndash; Return true if body is visible"
                    }
                ],
                "example": "if IsBodyVisible(body, 25) then\n\t--Body is within 25 meters visible to the camera\nend"
            },
            {
                "name": "IsBodyBroken",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Determine if any shape of a body has been broken.",
                "return": [
                    {
                        "name": "broken",
                        "type": "boolean",
                        "desc": "&ndash; Return true if body is broken"
                    }
                ],
                "example": "local broken = IsBodyBroken(body)"
            },
            {
                "name": "IsBodyJointedToStatic",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Determine if a body is in any way connected to a static object, either by being static itself or\nbe being directly or indirectly jointed to something static.",
                "return": [
                    {
                        "name": "result",
                        "type": "boolean",
                        "desc": "&ndash; Return true if body is in any way connected to a static body"
                    }
                ],
                "example": "local connectedToStatic = IsBodyJointedToStatic(body)"
            },
            {
                "name": "DrawBodyOutline",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Alpha"
                    }
                ],
                "info": "Render next frame with an outline around specified body.\nIf no color is given, a white outline will be drawn.",
                "return": [],
                "example": "--Draw white outline at 50% transparency\nDrawBodyOutline(body, 0.5)\n\n--Draw green outline, fully opaque\nDrawBodyOutline(body, 0, 1, 0, 1)"
            },
            {
                "name": "DrawBodyHighlight",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Amount"
                    }
                ],
                "info": "Flash the appearance of a body when rendering this frame. This is\nused for valuables in the game.",
                "return": [],
                "example": "DrawBodyHighlight(body, 0.5)"
            }
        ]
    },
    {
        "group": "Shape",
        "desc": "A shape is a voxel object and always owned by a body. A single body may contain multiple shapes. The transformof shape is expressed in the parent body coordinate system.",
        "table": null,
        "functions": [
            {
                "name": "FindShape",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first shape with specified tag or zero if not found"
                    }
                ],
                "example": "--Search for a shape tagged \"mybox\" in script scope\nlocal target = FindShape(\"mybox\")\n\n--Search for a shape tagged \"laserturret\" in entire scene\nlocal escape = FindBody(\"laserturret\", true)"
            },
            {
                "name": "FindShapes",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all shapes with specified tag"
                    }
                ],
                "example": "--Search for shapes tagged \"alarmbox\" in script scope\nlocal shapes = FindShapes(\"alarmbox\")\nfor i=1, #shapes do\n\tlocal shape = shapes[i]\n\t...\nend"
            },
            {
                "name": "GetShapeLocalTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Return shape transform in body space"
                    }
                ],
                "example": "--Shape transform in body local space\nlocal shapeTransform = GetShapeLocalTransform(shape)\n\n--Body transform in world space\nlocal bodyTransforn = GetBodyTransform(GetShapeBody(shape))\n\n--Shape transform in world space\nlocal worldTranform = TransformToParentTransform(bodyTransform, shapeTransform)"
            },
            {
                "name": "SetShapeLocalTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    },
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Shape transform in body space"
                    }
                ],
                "return": [],
                "example": "local transform = Transform(Vec(0, 1, 0), QuatEuler(0, 90, 0))\nSetShapeLocalTransform(shape, transform)"
            },
            {
                "name": "GetShapeWorldTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "This is a convenience function, transforming the shape out of body space",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Return shape transform in world space"
                    }
                ],
                "example": "local worldTransform = GetShapeWorldTransform(shape)\n\n--This is equivalent to\nlocal shapeTransform = GetShapeLocalTransform(shape)\nlocal bodyTransforn = GetBodyTransform(GetShapeBody(shape))\nworldTranform = TransformToParentTransform(bodyTransform, shapeTransform)"
            },
            {
                "name": "GetShapeBody",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "Get handle to the body this shape is owned by. A shape is always owned by a body,\nbut can be transfered to a new body during destruction.",
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Body handle"
                    }
                ],
                "example": "local body = GetShapeBody(shape)"
            },
            {
                "name": "GetShapeJoints",
                "args": [
                    {
                        "name": "shape",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with joints connected to shape"
                    }
                ],
                "example": "local hinges = GetShapeJoints(door)\nfor i=1, #hinges do\n\tlocal joint = hinges[i]\n\t...\nend"
            },
            {
                "name": "GetShapeLights",
                "args": [
                    {
                        "name": "shape",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table of lights owned by shape"
                    }
                ],
                "example": "local lights = GetShapeLights(shape)\nfor i=1, #lights do\n\tlocal light = lights[i]\n\t...\nend"
            },
            {
                "name": "GetShapeBounds",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "Return the world space, axis-aligned bounding box for a shape.",
                "return": [
                    {
                        "name": "min",
                        "type": "table",
                        "desc": "&ndash; Vector representing the AABB lower bound"
                    },
                    {
                        "name": "max",
                        "type": "table",
                        "desc": "&ndash; Vector representing the AABB upper bound"
                    }
                ],
                "example": "local min, max = GetShapeBounds(shape)\nlocal boundsSize = VecSub(max, min)\nlocal center = VecLerp(min, max, 0.5)"
            },
            {
                "name": "SetShapeEmissiveScale",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    },
                    {
                        "name": "scale",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Scale factor for emissiveness"
                    }
                ],
                "info": "Scale emissiveness for shape. If the shape has light sources attached,\ntheir intensity will be scaled by the same amount.",
                "return": [],
                "example": "--Pulsate emissiveness and light intensity for shape\nlocal scale = math.sin(GetTime())*0.5 + 0.5\nSetShapeEmissiveScale(shape, scale)"
            },
            {
                "name": "GetShapeMaterialAtPosition",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    },
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Position in world space"
                    }
                ],
                "info": "Return material properties for a particular voxel",
                "return": [
                    {
                        "name": "type",
                        "type": "string",
                        "desc": "&ndash; Material type"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "desc": "&ndash; Alpha"
                    }
                ],
                "example": "local hit, dist, normal, shape = QueryRaycast(pos, dir, 10)\nif hit then\n\tlocal hitPoint = VecAdd(pos, VecScale(dir, dist))\n\tlocal mat = GetShapeMaterialAtPosition(shape, hitPoint)\n\tDebugPrint(\"Raycast hit voxel made out of \" .. mat)\nend"
            },
            {
                "name": "GetShapeSize",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "Return the size of a shape in voxels",
                "return": [
                    {
                        "name": "xsize",
                        "type": "number",
                        "desc": "&ndash; Size in voxels along x axis"
                    },
                    {
                        "name": "ysize",
                        "type": "number",
                        "desc": "&ndash; Size in voxels along y axis"
                    },
                    {
                        "name": "zsize",
                        "type": "number",
                        "desc": "&ndash; Size in voxels along z axis"
                    }
                ],
                "example": "local x, y, z = GetShapeSize(shape)"
            },
            {
                "name": "GetShapeVoxelCount",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "Return the number of voxels in a shape, not including empty space",
                "return": [
                    {
                        "name": "count",
                        "type": "number",
                        "desc": "&ndash; Number of voxels in shape"
                    }
                ],
                "example": "local voxelCount = GetShapeVoxelCount(shape)"
            },
            {
                "name": "IsShapeVisible",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    },
                    {
                        "name": "maxDist",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Maximum visible distance"
                    },
                    {
                        "name": "rejectTransparent",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; See through transparent materials. Default false."
                    }
                ],
                "info": "This will check if a shape is currently visible in the camera frustum and\nnot occluded by other objects.",
                "return": [
                    {
                        "name": "visible",
                        "type": "boolean",
                        "desc": "&ndash; Return true if shape is visible"
                    }
                ],
                "example": "if IsShapeVisible(shape, 25) then\n\t--Shape is within 25 meters visible to the camera\nend"
            },
            {
                "name": "IsShapeBroken",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "Determine if shape has been broken. Note that a shape can be transfered\nto another body during destruction, but might still not be considered\nbroken if all voxels are intact.",
                "return": [
                    {
                        "name": "broken",
                        "type": "boolean",
                        "desc": "&ndash; Return true if shape is broken"
                    }
                ],
                "example": "local broken = IsShapeBroken(shape)"
            },
            {
                "name": "DrawShapeOutline",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Alpha"
                    }
                ],
                "info": "Render next frame with an outline around specified shape.\nIf no color is given, a white outline will be drawn.",
                "return": [],
                "example": "--Draw white outline at 50% transparency\nDrawShapeOutline(shape, 0.5)\n\n--Draw green outline, fully opaque\nDrawShapeOutline(shape, 0, 1, 0, 1)"
            },
            {
                "name": "DrawShapeHighlight",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Amount"
                    }
                ],
                "info": "Flash the appearance of a shape when rendering this frame.",
                "return": [],
                "example": "DrawShapeHighlight(shape, 0.5)"
            }
        ]
    },
    {
        "group": "Location",
        "desc": "Locations are transforms placed in the editor as markers. Location transforms are always expressed in world space coordinates.",
        "table": null,
        "functions": [
            {
                "name": "FindLocation",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first location with specified tag or zero if not found"
                    }
                ],
                "example": "local loc = FindLocation(\"start\")"
            },
            {
                "name": "FindLocations",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all locations with specified tag"
                    }
                ],
                "example": "--Search for locations tagged \"waypoint\" in script scope\nlocal locations = FindLocations(\"waypoint\")\nfor i=1, #locs do\n\tlocal locs = locations[i]\n\t...\nend"
            },
            {
                "name": "GetLocationTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Location handle"
                    }
                ],
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Transform of the location"
                    }
                ],
                "example": "local t = GetLocationTransform(loc)"
            }
        ]
    },
    {
        "group": "Joint",
        "desc": "Joints are used to physically connect two shapes. There are several types of joints and they are typicallyplaced in the editor. When destruction occurs, joints may be transferred to new shapes, detached orcompletely disabled.",
        "table": null,
        "functions": [
            {
                "name": "FindJoint",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first joint with specified tag or zero if not found"
                    }
                ],
                "example": "local joint = FindLocation(\"doorhinge\")"
            },
            {
                "name": "FindJoints",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all joints with specified tag"
                    }
                ],
                "example": "--Search for locations tagged \"doorhinge\" in script scope\nlocal hinges = FindLocations(\"doorhinge\")\nfor i=1, #hinges do\n\tlocal joint = hinges[i]\n\t...\nend"
            },
            {
                "name": "IsJointBroken",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    }
                ],
                "return": [
                    {
                        "name": "broken",
                        "type": "boolean",
                        "desc": "&ndash; True if joint is broken"
                    }
                ],
                "example": "local broken = IsJointBroken(joint)"
            },
            {
                "name": "GetJointType",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    }
                ],
                "info": "Joint type is one of the following: \"ball\", \"hinge\", \"prismatic\" or \"rope\".\nAn empty string is returned if joint handle is invalid.",
                "return": [
                    {
                        "name": "type",
                        "type": "string",
                        "desc": "&ndash; Joint type"
                    }
                ],
                "example": "if GetJointType(joint) == \"rope\" then\n\t--Joint is rope\nend"
            },
            {
                "name": "GetJointOtherShape",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    },
                    {
                        "name": "shape",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "A joint is always connected to two shapes. Use this function if you know \none shape and want to find the other one.",
                "return": [
                    {
                        "name": "other",
                        "type": "number",
                        "desc": "&ndash; Other shape handle"
                    }
                ],
                "example": "--joint is connected to a and b\n\notherShape = GetJointOtherShape(joint, a)\n--otherShape is now b\n\notherShape = GetJointOtherShape(joint, b)\n--otherShape is now a"
            },
            {
                "name": "SetJointMotor",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    },
                    {
                        "name": "velocity",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Desired velocity"
                    },
                    {
                        "name": "strength",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Desired strength. Default is infinite. Zero to disable."
                    }
                ],
                "info": "Set joint motor target velocity. If joint is of type hinge, velocity is\ngiven in radians per second angular velocity. If joint type is prismatic joint\nvelocity is given in meters per second. Calling this function will override and\nvoid any previous call to SetJointMotorTarget.",
                "return": [],
                "example": "--Set motor speed to 0.5 radians per second\nSetJointMotor(hinge, 0.5)"
            },
            {
                "name": "SetJointMotorTarget",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    },
                    {
                        "name": "target",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Desired movement target"
                    },
                    {
                        "name": "maxVel",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Maximum velocity to reach target. Default is infinite."
                    },
                    {
                        "name": "strength",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Desired strength. Default is infinite. Zero to disable."
                    }
                ],
                "info": "If a joint has a motor target, it will try to maintain its relative movement. This\nis very useful for elevators or other animated, jointed mechanisms.\nIf joint is of type hinge, target is an angle in degrees (-180 to 180) and velocity\nis given in radians per second. If joint type is prismatic, target is given\nin meters and velocity is given in meters per second. Setting a motor target will\noverride any previous call to SetJointMotor.",
                "return": [],
                "example": "--Make joint reach a 45 degree angle, going at a maximum of 3 radians per second\nSetJointMotorTarget(hinge, 45, 3)"
            },
            {
                "name": "GetJointLimits",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    }
                ],
                "info": "Return joint limits for hinge or prismatic joint. Returns angle or distance\ndepending on joint type.",
                "return": [
                    {
                        "name": "min",
                        "type": "number",
                        "desc": "&ndash; Minimum joint limit (angle or distance)"
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "desc": "&ndash; Maximum joint limit (angle or distance)"
                    }
                ],
                "example": "local min, max = GetJointLimits(hinge)"
            },
            {
                "name": "GetJointMovement",
                "args": [
                    {
                        "name": "joint",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Joint handle"
                    }
                ],
                "info": "Return the current position or angle or the joint, measured in same way\nas joint limits.",
                "return": [
                    {
                        "name": "movement",
                        "type": "number",
                        "desc": "&ndash; Current joint position or angle"
                    }
                ],
                "example": "local current = GetJointMovement(hinge)"
            }
        ]
    },
    {
        "group": "Light",
        "desc": "Light sources can be of several differnt types and configured in the editor. If a light source is owned by a shape, the intensity of the light source is scaled by the emissive scale of that shape. If the parent shape breaks, the emissive scale is set to zero and the light source is disabled. A light sourcewithout a parent shape will always emit light, unless exlicitly disabled by a script.",
        "table": null,
        "functions": [
            {
                "name": "FindLight",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first light with specified tag or zero if not found"
                    }
                ],
                "example": "local light = FindLight(\"main\")"
            },
            {
                "name": "FindLights",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all lights with specified tag"
                    }
                ],
                "example": "--Search for lights tagged \"main\" in script scope\nlocal lights = FindLights(\"main\")\nfor i=1, #lights do\n\tlocal light = lights[i]\n\t...\nend"
            },
            {
                "name": "SetLightEnabled",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Light handle"
                    },
                    {
                        "name": "enabled",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; Set to true if light should be enabled"
                    }
                ],
                "info": "If light is owned by a shape, the emissive scale of that shape will be set \nto 0.0 when light is disabled and 1.0 when light is enabled.",
                "return": [],
                "example": "SetLightEnabled(light, false)"
            },
            {
                "name": "SetLightColor",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Light handle"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red value"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green value"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue value"
                    }
                ],
                "info": "This will only set the color tint of the light. Use SetLightIntensity for brightness.\nSetting the light color will not affect the emissive color of a parent shape.",
                "return": [],
                "example": "--Set light color to yellow\nSetLightColor(light, 1, 1, 0)"
            },
            {
                "name": "SetLightIntensity",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Light handle"
                    },
                    {
                        "name": "intensity",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Desired intensity of the light"
                    }
                ],
                "info": "If the shape is owned by a shape you most likely want to use\nSetShapeEmissiveScale instead, which will affect both the emissiveness \nof the shape and the brightness of the light at the same time.",
                "return": [],
                "example": "--Pulsate light\nSetLightIntensity(light, math.sin(GetTime())*0.5 + 1.0)"
            },
            {
                "name": "GetLightTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Light handle"
                    }
                ],
                "info": "Lights that are owned by a dynamic shape are automatcially moved with that shape",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; World space light transform"
                    }
                ],
                "example": "local pos = GetLightTransform(light).pos"
            },
            {
                "name": "GetLightShape",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Light handle"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Shape handle or zero if not attached to shape"
                    }
                ],
                "example": "local shape = GetLightShape(light)"
            },
            {
                "name": "IsPointAffectedByLight",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Light handle"
                    },
                    {
                        "name": "point",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    }
                ],
                "return": [
                    {
                        "name": "affected",
                        "type": "boolean",
                        "desc": "&ndash; Return true if point is in light cone and range"
                    }
                ],
                "example": "local point = Vec(0, 10, 0)\nlocal affected = IsPointAffectedByLight(light, point)"
            }
        ]
    },
    {
        "group": "Trigger",
        "desc": "Triggers can be placed in the scene and queried by scripts to see if something is within a certain partof the scene.",
        "table": null,
        "functions": [
            {
                "name": "FindTrigger",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first trigger with specified tag or zero if not found"
                    }
                ],
                "example": "local goal = FindTrigger(\"goal\")"
            },
            {
                "name": "FindTriggers",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all triggers with specified tag"
                    }
                ],
                "example": "--Find triggers tagged \"toxic\" in script scope\nlocal triggers = FindTriggers(\"toxic\")\nfor i=1, #triggers do\n\tlocal trigger = triggers[i]\n\t...\nend"
            },
            {
                "name": "GetTriggerTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    }
                ],
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Current trigger transform in world space"
                    }
                ],
                "example": "local t = GetTriggerTransform(trigger)"
            },
            {
                "name": "SetTriggerTransform",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    },
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Desired trigger transform in world space"
                    }
                ],
                "return": [],
                "example": "local t = Transform(Vec(0, 1, 0), QuatEuler(0, 90, 0))\nSetTriggerTransform(trigger, t)"
            },
            {
                "name": "IsBodyInTrigger",
                "args": [
                    {
                        "name": "trigger",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    },
                    {
                        "name": "body",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "This function will only check the center point of the body",
                "return": [],
                "example": "if IsBodyInTrigger(trigger, body) then\n\t...\nend"
            },
            {
                "name": "IsVehicleInTrigger",
                "args": [
                    {
                        "name": "trigger",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    },
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    }
                ],
                "info": "This function will only check origo of vehicle",
                "return": [],
                "example": "if IsVehicleInTrigger(trigger, vehicle) then\n\t...\nend"
            },
            {
                "name": "IsShapeInTrigger",
                "args": [
                    {
                        "name": "trigger",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    },
                    {
                        "name": "shape",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "This function will only check the center point of the shape",
                "return": [],
                "example": "if IsShapeInTrigger(trigger, shape) then\n\t...\nend"
            },
            {
                "name": "IsPointInTrigger",
                "args": [
                    {
                        "name": "trigger",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    },
                    {
                        "name": "point",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Word space point as vector"
                    }
                ],
                "return": [],
                "example": "local p = Vec(0, 10, 0)\nif IsPointInTrigger(trigger, p) then\n\t...\nend"
            },
            {
                "name": "IsTriggerEmpty",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Trigger handle"
                    },
                    {
                        "name": "demolision",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; If true, small debris and vehicles are ignored"
                    }
                ],
                "info": "This function will check if trigger is empty. If trigger contains any part of a body\nit will return false and the highest point as second return value.",
                "return": [
                    {
                        "name": "empty",
                        "type": "boolean",
                        "desc": "&ndash; True if trigger is empty"
                    },
                    {
                        "name": "maxpoint",
                        "type": "table",
                        "desc": "&ndash; World space point of highest point (largest Y coordinate) if not empty"
                    }
                ],
                "example": "local empty, highPoint = IsTriggerEmpty(trigger)\nif not empty then\n\t--highPoint[2] is the tallest point in trigger\nend"
            }
        ]
    },
    {
        "group": "Screen",
        "desc": "Screens display the content of UI scripts and can be made interactive.",
        "table": null,
        "functions": [
            {
                "name": "FindScreen",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first screen with specified tag or zero if not found"
                    }
                ],
                "example": "local screen = FindTrigger(\"tv\")"
            },
            {
                "name": "FindScreens",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all screens with specified tag"
                    }
                ],
                "example": "--Find screens tagged \"tv\" in script scope\nlocal screens = FindScreens(\"tv\")\nfor i=1, #screens do\n\tlocal screen = screens[i]\n\t...\nend"
            },
            {
                "name": "SetScreenEnabled",
                "args": [
                    {
                        "name": "screen",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Screen handle"
                    },
                    {
                        "name": "enabled",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; True if screen should be enabled"
                    }
                ],
                "info": "Enable or disable screen",
                "return": [],
                "example": "SetScreenEnabled(screen, true)"
            },
            {
                "name": "IsScreenEnabled",
                "args": [
                    {
                        "name": "screen",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Screen handle"
                    }
                ],
                "return": [
                    {
                        "name": "enabled",
                        "type": "boolean",
                        "desc": "&ndash; True if screen is enabled"
                    }
                ],
                "example": "local b = IsScreenEnabled(screen)"
            },
            {
                "name": "GetScreenShape",
                "args": [
                    {
                        "name": "screen",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Screen handle"
                    }
                ],
                "info": "Return handle to the parent shape of a screen",
                "return": [
                    {
                        "name": "shape",
                        "type": "number",
                        "desc": "&ndash; Shape handle or zero if none"
                    }
                ],
                "example": "local shape = GetScreenShape(screen)"
            }
        ]
    },
    {
        "group": "Vehicle",
        "desc": "Vehicles are set up in the editor and consists of multiple parts owned by a vehicle entity.",
        "table": null,
        "functions": [
            {
                "name": "FindVehicle",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to first vehicle with specified tag or zero if not found"
                    }
                ],
                "example": "local vehicle = FindVehicle(\"mycar\")"
            },
            {
                "name": "FindVehicles",
                "args": [
                    {
                        "name": "tag",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tag name"
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Search in entire scene"
                    }
                ],
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all vehicles with specified tag"
                    }
                ],
                "example": "--Find all vehicles in level tagged \"boat\"\nlocal boats = FindVehicles(\"boat\")\nfor i=1, #boats do\n\tlocal boat = boats[i]\n\t...\nend"
            },
            {
                "name": "GetVehicleTransform",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    }
                ],
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Transform of vehicle"
                    }
                ],
                "example": "local t = GetVehicleTransform(vehicle)"
            },
            {
                "name": "GetVehicleBody",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    }
                ],
                "return": [
                    {
                        "name": "body",
                        "type": "number",
                        "desc": "&ndash; Main body of vehicle"
                    }
                ],
                "example": "local body = GetVehicleBody(vehicle)\nif IsBodyBroken(body) then\n--Vehicle body is broken\nend"
            },
            {
                "name": "GetVehicleHealth",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    }
                ],
                "return": [
                    {
                        "name": "health",
                        "type": "number",
                        "desc": "&ndash; Vehicle health (zero to one)"
                    }
                ],
                "example": "local health = GetVehicleHealth(vehicle)"
            },
            {
                "name": "GetVehicleDriverPos",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    }
                ],
                "return": [
                    {
                        "name": "pos",
                        "type": "table",
                        "desc": "&ndash; Driver position as vector in vehicle space"
                    }
                ],
                "example": "local driverPos = GetVehicleDriverPos(vehicle)\nlocal t = GetVehicleTransform(vehicle)\nlocal worldPos = TransformToParentPoint(t, driverPos)"
            },
            {
                "name": "DriveVehicle",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    },
                    {
                        "name": "drive",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Reverse/forward control -1 to 1"
                    },
                    {
                        "name": "steering",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Left/right control -1 to 1"
                    },
                    {
                        "name": "handbrake",
                        "type": "boolean",
                        "optional": false,
                        "desc": "&ndash; Handbrake control"
                    }
                ],
                "info": "This function applies input to vehicles, allowing for autonomous driving. The vehicle\nwill be turned on automatically and turned off when no longer called. Call this from\nthe tick function, not update.",
                "return": [],
                "example": "function tick()\n\t--Drive mycar forwards\n\tlocal v = FindVehicle(\"mycar\")\n\tDriveVehicle(v, 1, 0, false)\nend"
            }
        ]
    },
    {
        "group": "Player",
        "desc": "The player functions expose certain information about the player.",
        "table": null,
        "functions": [
            {
                "name": "GetPlayerPos",
                "args": [],
                "info": "Return center point of player. This function is deprecated. \nUse GetPlayerTransform instead.",
                "return": [
                    {
                        "name": "position",
                        "type": "table",
                        "desc": "&ndash; Player center position"
                    }
                ],
                "example": "local p = GetPlayerPos()\n\n--This is equivalent to\np = VecAdd(GetPlayerTransform().pos, Vec(0,1,0))"
            },
            {
                "name": "GetPlayerTransform",
                "args": [],
                "info": "The player transform is located at the bottom of the player. The player transform\nconsiders heading (looking left and right). Forward is along negative Z axis.\nPlayer pitch (looking up and down) does not affect player transform. If you want\nthe transform of the eye, use GetPlayerCameraTransform() instead.",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Current player transform"
                    }
                ],
                "example": "local t = GetPlayerTransform()"
            },
            {
                "name": "SetPlayerTransform",
                "args": [
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Desired player transform"
                    }
                ],
                "info": "Instantly teleport the player to desired transform. Player velocity\nand up/down look angle will be set to zero during this process.",
                "return": [],
                "example": "local t = Transform(Vec(10, 0, 0), QuatEuler(0, 90, 0))\nSetPlayerTransform(t)"
            },
            {
                "name": "GetPlayerCameraTransform",
                "args": [],
                "info": "The player camera transform is usually the same as what you get from GetCameraTransform,\nbut if you have set a camera transform manually with SetCameraTransform, you can retrieve\nthe standard player camera transform with this function.",
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Current player camera transform"
                    }
                ],
                "example": "local t = GetPlayerCameraTransform()"
            },
            {
                "name": "SetPlayerSpawnTransform",
                "args": [
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Desired player spawn transform"
                    }
                ],
                "info": "Call this function during init to alter the player spawn transform.",
                "return": [],
                "example": "local t = Transform(Vec(10, 0, 0), QuatEuler(0, 90, 0))\nSetPlayerSpawnTransform(t)"
            },
            {
                "name": "GetPlayerVelocity",
                "args": [],
                "return": [
                    {
                        "name": "velocity",
                        "type": "table",
                        "desc": "&ndash; Player velocity in world space as vector"
                    }
                ],
                "example": "local vel = GetPlayerVelocity()"
            },
            {
                "name": "SetPlayerVehicle",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "value",
                        "optional": false,
                        "desc": "&ndash; Handle to vehicle or zero to not drive."
                    }
                ],
                "info": "Drive specified vehicle.",
                "return": [],
                "example": "local car = FindVehicle(\"mycar\")\nSetPlayerVehicle(car)"
            },
            {
                "name": "SetPlayerVelocity",
                "args": [
                    {
                        "name": "velocity",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Player velocity in world space as vector"
                    }
                ],
                "return": [],
                "example": "SetPlayerVelocity(Vec(0, 5, 0))"
            },
            {
                "name": "GetPlayerVehicle",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Current vehicle handle, or zero if not in vehicle"
                    }
                ],
                "example": "local vehicle = GetPlayerVehicle()\nif vehicle ~= 0 then\n\t...\nend"
            },
            {
                "name": "GetPlayerGrabShape",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to grabbed shape or zero if not grabbing."
                    }
                ],
                "example": "local shape = GetPlayerGrabShape()\nif shape ~= 0 then\n\t...\nend"
            },
            {
                "name": "GetPlayerGrabBody",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to grabbed body or zero if not grabbing."
                    }
                ],
                "example": "local body = GetPlayerGrabBody()\nif body ~= 0 then\n\t...\nend"
            },
            {
                "name": "GetPlayerPickShape",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to picked shape or zero if nothing is picked"
                    }
                ],
                "example": "local shape = GetPlayerPickShape()\nif shape ~= 0 then\n\t...\nend"
            },
            {
                "name": "GetPlayerPickBody",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to picked body or zero if nothing is picked"
                    }
                ],
                "example": "local body = GetPlayerPickBody()\nif body ~= 0 then\n\t...\nend"
            },
            {
                "name": "GetPlayerInteractShape",
                "args": [],
                "info": "Interactable shapes has to be tagged with \"interact\". The engine\ndetermines which interactable shape is currently interactable.",
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to interactable shape or zero"
                    }
                ],
                "example": "local shape = GetPlayerInteractShape()\nif shape ~= 0 then\n\t...\nend"
            },
            {
                "name": "GetPlayerInteractBody",
                "args": [],
                "info": "Interactable shapes has to be tagged with \"interact\". The engine\ndetermines which interactable body is currently interactable.",
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to interactable body or zero"
                    }
                ],
                "example": "local body = GetPlayerInteractBody()\nif body ~= 0 then\n\t...\nend"
            },
            {
                "name": "SetPlayerScreen",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Handle to screen or zero for no screen"
                    }
                ],
                "info": "Set the screen the player should interact with. For the screen\nto feature a mouse pointer and receieve input, the screen also\nneeds to have interactive property.",
                "return": [],
                "example": "--Interact with screen\nSetPlayerScreen(screen)\n\n--Do not interact with screen\nSetPlayerScreen(0)"
            },
            {
                "name": "GetPlayerScreen",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to interacted screen or zero if none"
                    }
                ],
                "example": "--Interact with screen\nlocal screen = GetPlayerScreen()"
            },
            {
                "name": "SetPlayerHealth",
                "args": [
                    {
                        "name": "health",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Set player health (between zero and one)"
                    }
                ],
                "return": [],
                "example": "SetPlayerHealth(0.5)"
            },
            {
                "name": "GetPlayerHealth",
                "args": [],
                "return": [
                    {
                        "name": "health",
                        "type": "number",
                        "desc": "&ndash; Current player health"
                    }
                ],
                "example": "local health = GetPlayerHealth()"
            },
            {
                "name": "RespawnPlayer",
                "args": [],
                "info": "Respawn player at spawn position without modifying the scene",
                "return": [],
                "example": "RespawnPlayer()"
            },
            {
                "name": "RegisterTool",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tool unique identifier"
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Tool name to show in hud"
                    },
                    {
                        "name": "file",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to vox file"
                    }
                ],
                "info": "Register a custom tool that will show up in the player inventory and \ncan be selected with scroll wheel. Do this only once per tool.\nYou also need to enable the tool in the registry before it can be used. ",
                "return": [],
                "example": "function init()\n\tRegisterTool(\"lasergun\", \"Laser Gun\", \"MOD/vox/lasergun.vox\")\n\tSetBool(\"game.tool.lasergun.enabled\", true)\nend\n\nfunction tick()\n\tif GetString(\"game.player.tool\") == \"lasergun\" then\n\t\t--Tool is selected. Tool logic goes here.\n\tend\nend"
            },
            {
                "name": "GetToolBody",
                "args": [],
                "info": "Return body handle of the visible tool. You can use this to retrieve tool shapes\nand animate them, change emissiveness, etc. Do not attempt to set the tool body\ntransform, since it is controlled by the engine. Use SetToolTranform for that.",
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to currently visible tool body or zero if none"
                    }
                ],
                "example": "local toolBody = GetToolBody()\nif toolBody~=0 then\n\t...\nend"
            },
            {
                "name": "SetToolTransform",
                "args": [
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Tool body transform"
                    }
                ],
                "info": "Apply an additional transform on the visible tool body. This can be used to\ncreate tool animations. You need to set this every frame from the tick function.",
                "return": [],
                "example": "--Offset the tool half a meter to the right\nlocal offset = Transform(Vec(0.5, 0, 0))\nSetToolTransform(offset)"
            }
        ]
    },
    {
        "group": "Sound",
        "desc": "Sound functions are used for playing sounds or loops in the world. There sound functions are alwyas positioned and will be affected by acoustics simulation. If you want to play dry soundswithout acoustics you should use UiSound and UiSoundLoop in the User Interface section.",
        "table": null,
        "functions": [
            {
                "name": "LoadSound",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to ogg sound file"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Sound handle"
                    }
                ],
                "example": "local snd = LoadSound(\"beep.ogg\")"
            },
            {
                "name": "LoadLoop",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to ogg sound file"
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Loop handle"
                    }
                ],
                "example": "local loop = LoadLoop(\"siren.ogg\")"
            },
            {
                "name": "PlaySound",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Sound handle"
                    },
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": true,
                        "desc": "&ndash; World position as vector. Default is player position."
                    },
                    {
                        "name": "volume",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Playback volume. Default is 1.0"
                    }
                ],
                "return": [],
                "example": "function init()\n\tsnd = LoadSound(\"beep.ogg\")\nend\n\nfunction tick()\n\tif trigSound then\n\t\tlocal pos = Vec(100, 0, 0)\n\t\tPlaySound(snd, pos, 0.5)\n\tend\nend"
            },
            {
                "name": "PlayLoop",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Loop handle"
                    },
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": true,
                        "desc": "&ndash; World position as vector. Default is player position."
                    },
                    {
                        "name": "volume",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Playback volume. Default is 1.0"
                    }
                ],
                "info": "Call this function continuously to play loop",
                "return": [],
                "example": "function init()\n\tloop = LoadLoop(\"siren.ogg\")\nend\n\nfunction tick()\n\tlocal pos = Vec(100, 0, 0)\n\tPlayLoop(loop, pos, 0.5)\nend"
            },
            {
                "name": "PlayMusic",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Music path"
                    }
                ],
                "return": [],
                "example": "PlayMusic(\"MOD/music/background.ogg\")"
            },
            {
                "name": "StopMusic",
                "args": [],
                "return": [],
                "example": "StopMusic()"
            }
        ]
    },
    {
        "group": "Sprite",
        "desc": "Sprites are 2D images in PNG or JPG format that can be drawn into the world. Sprites can be drawn with ot without depth test (occluded by geometry). Sprites will not be affected by lightingbut they will go through post processing. If you want to display positioned information to the player as an overlay, you probably want to use the Ui functions in combination with UiWorldToPixel instead.",
        "table": null,
        "functions": [
            {
                "name": "LoadSprite",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to sprite. Must be PNG or JPG format."
                    }
                ],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Sprite handle"
                    }
                ],
                "example": "function init()\n\tarrow = LoadSprite(\"arrow.png\")\nend"
            },
            {
                "name": "DrawSprite",
                "args": [
                    {
                        "name": "handle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Sprite handle"
                    },
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Transform"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Width in meters"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Height in meters"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red color"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green color"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue color"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Alpha"
                    },
                    {
                        "name": "depthTest",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Depth test enabled. Default false."
                    },
                    {
                        "name": "additive",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Additive blending enabled. Default false."
                    }
                ],
                "info": "Draw sprite in world at next frame. Call this function from the tick callback.",
                "return": [],
                "example": "function init()\n\tarrow = LoadSprite(\"arrow.png\")\nend\n\nfunction tick()\n\t--Draw sprite using transform\n\t--Size is two meters in width and height\n\t--Color is white, fully opaue\n\tlocal t = Transform(Vec(0, 10, 0), QuatEuler(0, GetTime(), 0))\n\tDrawSprite(arrow, t, 2, 2, 1, 1, 1, 1)\nend"
            }
        ]
    },
    {
        "group": "Scene queries",
        "desc": "Query the level in various ways.",
        "table": null,
        "functions": [
            {
                "name": "QueryRequire",
                "args": [
                    {
                        "name": "layers",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Space separate list of layers"
                    }
                ],
                "info": "Set required layers for next query. Available layers are: \n<table border=0><tr><td class='header'>&nbsp;Layer&nbsp;</td><td class='header'>&nbsp;Description</td></tr>\n<tr><td class='first' valign='top'>physical\t</td><td valign='top'> have a physical representation</td></tr><tr><td class='first' valign='top'>dynamic\t\t</td><td valign='top'> part of a dynamic body</td></tr><tr><td class='first' valign='top'>static\t\t</td><td valign='top'> part of a static body</td></tr><tr><td class='first' valign='top'>large\t\t</td><td valign='top'> above debris threshold</td></tr><tr><td class='first' valign='top'>small\t\t</td><td valign='top'> below debris threshold</td></tr><table/>",
                "return": [],
                "example": "--Raycast dynamic, physical objects above debris threshold, but not specific vehicle\nQueryRequire(\"physical dynamic large\")\nQueryRejectVehicle(vehicle)\nQueryRaycast(...)"
            },
            {
                "name": "QueryRejectVehicle",
                "args": [
                    {
                        "name": "vehicle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Vehicle handle"
                    }
                ],
                "info": "Exclude vehicle from the next query",
                "return": [],
                "example": "--Do not include vehicle in next raycast\nQueryRejectVehicle(vehicle)\nQueryRaycast(...)"
            },
            {
                "name": "QueryRejectBody",
                "args": [
                    {
                        "name": "body",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Body handle"
                    }
                ],
                "info": "Exclude body from the next query",
                "return": [],
                "example": "--Do not include body in next raycast\nQueryRejectBody(body)\nQueryRaycast(...)"
            },
            {
                "name": "QueryRejectShape",
                "args": [
                    {
                        "name": "shape",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Shape handle"
                    }
                ],
                "info": "Exclude shape from the next query",
                "return": [],
                "example": "--Do not include shape in next raycast\nQueryRejectShape(shape)\nQueryRaycast(...)"
            },
            {
                "name": "QueryRaycast",
                "args": [
                    {
                        "name": "origin",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Raycast origin as world space vector"
                    },
                    {
                        "name": "direction",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Unit length raycast direction as world space vector"
                    },
                    {
                        "name": "maxDist",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Raycast maximum distance. Keep this as low as possible for good performance."
                    },
                    {
                        "name": "radius",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Raycast thickness. Default zero."
                    },
                    {
                        "name": "rejectTransparent",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Raycast through transparent materials. Default false."
                    }
                ],
                "info": "This will perform a raycast or spherecast (if radius is more than zero) query.\nIf you want to set up a filter for the query you need to do so before every call\nto this function.",
                "return": [
                    {
                        "name": "hit",
                        "type": "boolean",
                        "desc": "&ndash; True if raycast hit something"
                    },
                    {
                        "name": "dist",
                        "type": "number",
                        "desc": "&ndash; Hit distance from origin"
                    },
                    {
                        "name": "normal",
                        "type": "table",
                        "desc": "&ndash; World space normal at hit point"
                    },
                    {
                        "name": "shape",
                        "type": "number",
                        "desc": "&ndash; Handle to hit shape"
                    }
                ],
                "example": "--Raycast from a high point straight downwards, excluding a specific vehicle\nQueryRejectVehicle(vehicle)\nlocal hit, d = QueryRaycast(Vec(0, 100, 0), Vec(0, -1, 0), 100)\nif hit then\n\t...hit something at distance d\nend"
            },
            {
                "name": "QueryClosestPoint",
                "args": [
                    {
                        "name": "origin",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point"
                    },
                    {
                        "name": "maxDist",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Maximum distance. Keep this as low as possible for good performance."
                    }
                ],
                "info": "This will query the closest point to all shapes in the world. If you \nwant to set up a filter for the query you need to do so before every call\nto this function.",
                "return": [
                    {
                        "name": "hit",
                        "type": "boolean",
                        "desc": "&ndash; True if a point was found"
                    },
                    {
                        "name": "point",
                        "type": "table",
                        "desc": "&ndash; World space closest point"
                    },
                    {
                        "name": "normal",
                        "type": "table",
                        "desc": "&ndash; World space normal at closest point"
                    },
                    {
                        "name": "shape",
                        "type": "number",
                        "desc": "&ndash; Handle to closest shape"
                    }
                ],
                "example": "--Find closest point within 10 meters of {0, 5, 0}, excluding any point on myVehicle\nQueryRejectVehicle(myVehicle)\nlocal hit, p, n, s = QueryClosestPoint(Vec(0, 5, 0), 10)\nif hit then\n\t--Point p of shape s is closest\nend"
            },
            {
                "name": "QueryAabbShapes",
                "args": [
                    {
                        "name": "min",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Aabb minimum point"
                    },
                    {
                        "name": "max",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Aabb maximum point"
                    }
                ],
                "info": "Return all shapes within the provided world space, axis-aligned bounding box",
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all shapes in the aabb"
                    }
                ],
                "example": "local list = QueryAabbShapes(Vec(0, 0, 0), Vec(10, 10, 10))\nfor i=1, #list do\n\tlocal shape = list[i]\n\t..\nend"
            },
            {
                "name": "QueryAabbBodies",
                "args": [
                    {
                        "name": "min",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Aabb minimum point"
                    },
                    {
                        "name": "max",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Aabb maximum point"
                    }
                ],
                "info": "Return all bodies within the provided world space, axis-aligned bounding box",
                "return": [
                    {
                        "name": "list",
                        "type": "table",
                        "desc": "&ndash; Indexed table with handles to all bodies in the aabb"
                    }
                ],
                "example": "local list = QueryAabbBodies(Vec(0, 0, 0), Vec(10, 10, 10))\nfor i=1, #list do\n\tlocal body = list[i]\n\t..\nend"
            },
            {
                "name": "GetLastSound",
                "args": [],
                "return": [
                    {
                        "name": "volume",
                        "type": "number",
                        "desc": "&ndash; Volume of loudest sound played last frame"
                    },
                    {
                        "name": "position",
                        "type": "table",
                        "desc": "&ndash; World position of loudest sound played last frame"
                    }
                ],
                "example": "local vol, pos = GetLastSound()"
            },
            {
                "name": "IsPointInWater",
                "args": [
                    {
                        "name": "point",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World point as vector"
                    }
                ],
                "return": [
                    {
                        "name": "inWater",
                        "type": "boolean",
                        "desc": "&ndash; True if point is in water"
                    },
                    {
                        "name": "depth",
                        "type": "number",
                        "desc": "&ndash; Depth of point into water, or zero if not in water"
                    }
                ],
                "example": "local wet, d = IsPointInWater(Vec(10, 0, 0))\nif wet then\n\t...point d meters into water\nend"
            }
        ]
    },
    {
        "group": "Miscellaneous",
        "desc": "Functions of peripheral nature that doesn't fit in anywhere else",
        "table": null,
        "functions": [
            {
                "name": "Shoot",
                "args": [
                    {
                        "name": "origin",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Origin in world space as vector"
                    },
                    {
                        "name": "direction",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Unit length direction as world space vector"
                    },
                    {
                        "name": "type",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; 0 is regular bullet (default) and 1 is rocket"
                    }
                ],
                "info": "Shoot bullet or rocket (used for chopper)",
                "return": [],
                "example": "Shoot(Vec(0, 10, 0), Vec(0, 0, 1))"
            },
            {
                "name": "MakeHole",
                "args": [
                    {
                        "name": "position",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Hole center point"
                    },
                    {
                        "name": "r0",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Hole radius for soft materials"
                    },
                    {
                        "name": "r1",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Hole radius for medium materials. May not be bigger than r0. Default zero."
                    },
                    {
                        "name": "r2",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Hole radius for hard materials. May not be bigger than r1. Default zero."
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Make hole without playing any break sounds."
                    }
                ],
                "info": "Make a hole in the environment. Radius is given in meters. \nSoft materials: glass, foliage, dirt, wood, plaster and plastic. \nMedium materials: concrete, brick and weak metal. \nHard materials: hard metal and hard masonry.",
                "return": [],
                "example": "MakeHole(pos, 1.2, 1.0)"
            },
            {
                "name": "Explosion",
                "args": [
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Position in world space as vector"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Explosion size from 0.5 to 4.0"
                    }
                ],
                "return": [],
                "example": "Explosion(Vec(0, 10, 0), 1)"
            },
            {
                "name": "SpawnParticle",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Type of particle: \"smoke\", \"darksmoke\", \"fire\" or \"water\""
                    },
                    {
                        "name": "origin",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Origon in world space as vector"
                    },
                    {
                        "name": "velocity",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Velocity in world space as vector (m/s)"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Size of particle (meters)"
                    },
                    {
                        "name": "life",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Lifetime of particle (seconds)"
                    }
                ],
                "return": [],
                "example": "SpawnParticle(\"smoke\", Vec(0, 10, 0), Vec(0, 1, 0), 2, 5)"
            },
            {
                "name": "SpawnFire",
                "args": [
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Position in world space as vector"
                    }
                ],
                "return": [],
                "example": "SpawnFire(Vec(0, 10, 0))"
            },
            {
                "name": "GetFireCount",
                "args": [],
                "return": [
                    {
                        "name": "count",
                        "type": "number",
                        "desc": "&ndash; Number of active fires in level"
                    }
                ],
                "example": "local c = GetFireCount()"
            },
            {
                "name": "GetCameraTransform",
                "args": [],
                "return": [
                    {
                        "name": "transform",
                        "type": "table",
                        "desc": "&ndash; Current camera transform"
                    }
                ],
                "example": "local t = GetCameraTransform()"
            },
            {
                "name": "SetCameraTransform",
                "args": [
                    {
                        "name": "transform",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; Desired camera transform"
                    },
                    {
                        "name": "fov",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Optional horizontal field of view in degrees (default: 90)"
                    }
                ],
                "info": "Override current camera transform for this frame. Call continuously to keep overriding.",
                "return": [],
                "example": "SetCameraTransform(Transform(Vec(0, 10, 0), QuatEuler(0, 90, 0)))"
            },
            {
                "name": "PointLight",
                "args": [
                    {
                        "name": "pos",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space light position"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "intensity",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Intensity. Default is 1.0."
                    }
                ],
                "info": "Add a temporary point light to the world for this frame. Call continuously\nfor a steady light.",
                "return": [],
                "example": "--Pulsating, yellow light above world origo\nlocal intensity = 3 + math.sin(GetTime())\nPointLight(Vec(0, 5, 0), 1, 1, 0, intensity)"
            },
            {
                "name": "SetTimeScale",
                "args": [
                    {
                        "name": "scale",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Time scale 0.1 to 1.0"
                    }
                ],
                "info": "Experimental. Scale time in order to make a slow-motion effect. Audio will \nalso be affected. Note that this will affect physics behavior and is not \nintended for gameplay purposes. Calling this function will slow down time \nfor the next frame only. Call every frame from tick function to get steady\nslow-motion.",
                "return": [],
                "example": "--Slow down time when holding down a key\nif InputDown('t') then\n\tSetTimeScale(0.2)\nend"
            },
            {
                "name": "DrawLine",
                "args": [
                    {
                        "name": "p0",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    },
                    {
                        "name": "p1",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha"
                    }
                ],
                "info": "Draw a 3D line. In contrast to DrawDebugLine, it will not show behind objects. Default color is white.",
                "return": [],
                "example": "--Draw white debug line\nDrawLine(Vec(0, 0, 0), Vec(-10, 5, -10))\n\n--Draw red debug line\nDrawLine(Vec(0, 0, 0), Vec(10, 5, 10), 1, 0, 0)"
            },
            {
                "name": "DebugLine",
                "args": [
                    {
                        "name": "p0",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    },
                    {
                        "name": "p1",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha"
                    }
                ],
                "info": "Draw a 3D debug overlay line in the world. Default color is white.",
                "return": [],
                "example": "--Draw white debug line\nDebugLine(Vec(0, 0, 0), Vec(-10, 5, -10))\n\n--Draw red debug line\nDebugLine(Vec(0, 0, 0), Vec(10, 5, 10), 1, 0, 0)"
            },
            {
                "name": "DebugCross",
                "args": [
                    {
                        "name": "p0",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; World space point as vector"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Red"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Green"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Blue"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha"
                    }
                ],
                "info": "Draw a debug cross in the world to highlight a location. Default color is white.",
                "return": [],
                "example": "DebugCross(Vec(10, 5, 5))"
            },
            {
                "name": "DebugWatch",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Name"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Value"
                    }
                ],
                "info": "Show a named valued on screen for debug purposes.\nUp to 32 values can be shown simultaneously. Values updated the current\nframe are drawn opaque. Old values are drawn transparent in white.\n<p>\nThe function will also recognize vectors, quaternions and transforms as\nsecond argument and convert them to strings automatically.",
                "return": [],
                "example": "local t = 5\nDebugWatch(\"time\", t)"
            },
            {
                "name": "DebugPrint",
                "args": [
                    {
                        "name": "message",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Message to display"
                    }
                ],
                "info": "Display message on screen. The last 20 lines are displayed.",
                "return": [],
                "example": "DebugPrint(\"time\")"
            }
        ]
    },
    {
        "group": "User Interface",
        "desc": "The user interface functions are used for drawing interactive 2D graphics and can only becalled from the draw function of a script. The ui functions are designed with the immediatemode gui paradigm in mind and uses a cursor and state stack. Pushing and popping the stack is cheap and designed to be called often.",
        "table": null,
        "functions": [
            {
                "name": "UiMakeInteractive",
                "args": [],
                "info": "Calling this function will disable game input, bring up the mouse pointer\nand allow Ui interaction with the calling script without pausing the game.\nThis can be useful to make interactive user interfaces from scripts while\nthe game is running. Call this continuously every frame as long as Ui \ninteraction is desired.",
                "return": [],
                "example": "UiMakeInteractive()"
            },
            {
                "name": "UiPush",
                "args": [],
                "info": "Push state onto stack. This is used in combination with UiPop to\nremember a state and restore to that state later.",
                "return": [],
                "example": "UiColor(1,0,0)\nUiText(\"Red\")\nUiPush()\n\tUiColor(0,1,0)\n\tUiText(\"Green\")\nUiPop()\nUiText(\"Red\")"
            },
            {
                "name": "UiPop",
                "args": [],
                "info": "Pop state from stack and make it the current one. This is used in\ncombination with UiPush to remember a previous state and go back to\nit later.",
                "return": [],
                "example": "UiColor(1,0,0)\nUiText(\"Red\")\nUiPush()\n\tUiColor(0,1,0)\n\tUiText(\"Green\")\nUiPop()\nUiText(\"Red\")"
            },
            {
                "name": "UiWidth",
                "args": [],
                "return": [
                    {
                        "name": "width",
                        "type": "number",
                        "desc": "&ndash; Width of draw context"
                    }
                ],
                "example": "local w = UiWidth()"
            },
            {
                "name": "UiHeight",
                "args": [],
                "return": [
                    {
                        "name": "height",
                        "type": "number",
                        "desc": "&ndash; Height of draw context"
                    }
                ],
                "example": "local h = UiHeight()"
            },
            {
                "name": "UiCenter",
                "args": [],
                "return": [
                    {
                        "name": "center",
                        "type": "number",
                        "desc": "&ndash; Half width of draw context"
                    }
                ],
                "example": "local c = UiCenter()\n--Same as \nlocal c = UiWidth()/2"
            },
            {
                "name": "UiMiddle",
                "args": [],
                "return": [
                    {
                        "name": "middle",
                        "type": "number",
                        "desc": "&ndash; Half height of draw context"
                    }
                ],
                "example": "local m = UiMiddle()\n--Same as\nlocal m = UiHeight()/2"
            },
            {
                "name": "UiColor",
                "args": [
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red channel"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green channel"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue channel"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha channel. Default 1.0"
                    }
                ],
                "return": [],
                "example": "--Set color yellow\nUiColor(1,1,0)"
            },
            {
                "name": "UiColorFilter",
                "args": [
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red channel"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green channel"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue channel"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha channel. Default 1.0"
                    }
                ],
                "info": "Color filter, multiplied to all future colors in this scope",
                "return": [],
                "example": "UiPush()\n\t--Draw menu in transparent, yellow color tint\n\tUiColorFilter(1, 1, 0, 0.5)\n\tdrawMenu()\nUiPop()"
            },
            {
                "name": "UiTranslate",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; X component"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Y component"
                    }
                ],
                "info": "Translate cursor",
                "return": [],
                "example": "UiPush()\n\tUiTranslate(100, 0)\n\tUiText(\"Indented\")\nUiPop()"
            },
            {
                "name": "UiRotate",
                "args": [
                    {
                        "name": "angle",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Angle in degrees, counter clockwise"
                    }
                ],
                "info": "Rotate cursor",
                "return": [],
                "example": "UiPush()\n\tUiRotate(45)\n\tUiText(\"Rotated\")\nUiPop()"
            },
            {
                "name": "UiScale",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; X component"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Y component. Default value is x."
                    }
                ],
                "info": "Scale cursor either uniformly (one argument) or non-uniformly (two arguments)",
                "return": [],
                "example": "UiPush()\n\tUiScale(2)\n\tUiText(\"Double size\")\nUiPop()"
            },
            {
                "name": "UiWindow",
                "args": [
                    {
                        "name": "width",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Window width"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Window height"
                    },
                    {
                        "name": "clip",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Clip content outside window. Default is false."
                    }
                ],
                "info": "Set up new bounds. Calls to UiWidth, UiHeight, UiCenter and UiMiddle\nwill operate in the context of the window size. \nIf clip is set to true, contents of window will be clipped to \nbounds (only works properly for non-rotated windows).",
                "return": [],
                "example": "UiPush()\n\tUiWindow(400, 200)\n\tlocal w = UiWidth()\n\t--w is now 400\nUiPop()"
            },
            {
                "name": "UiSafeMargins",
                "args": [],
                "info": "Return a safe drawing area that will always be visible regardless of\ndisplay aspect ratio. The safe drawing area will always be 1920 by 1080\nin size. This is useful for setting up a fixed size UI.",
                "return": [
                    {
                        "name": "x0",
                        "type": "number",
                        "desc": "&ndash; Left"
                    },
                    {
                        "name": "y0",
                        "type": "number",
                        "desc": "&ndash; Top"
                    },
                    {
                        "name": "x1",
                        "type": "number",
                        "desc": "&ndash; Right"
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "desc": "&ndash; Bottom"
                    }
                ],
                "example": "function draw()\n\tlocal x0, y0, x1, y1 = UiSafeMargins()\n\tUiTranslate(x0, y0)\n\tUiWindow(x1-x0, y1-y0, true)\n\t--The drawing area is now 1920 by 1080 in the center of screen\n\tdrawMenu()\nend"
            },
            {
                "name": "UiAlign",
                "args": [
                    {
                        "name": "alignment",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Alignment keywords"
                    }
                ],
                "info": "The alignment determines how content is aligned with respect to the\ncursor.\n<table border=0><tr><td class='header'>&nbsp;Alignment&nbsp;</td><td class='header'>&nbsp;Description</td></tr>\n<tr><td class='first' valign='top'>left\t</td><td valign='top'> Horizontally align to the left</td></tr><tr><td class='first' valign='top'>right\t</td><td valign='top'> Horizontally align to the right</td></tr><tr><td class='first' valign='top'>center\t</td><td valign='top'> Horizontally align to the center</td></tr><tr><td class='first' valign='top'>top\t\t</td><td valign='top'> Vertically align to the top</td></tr><tr><td class='first' valign='top'>bottom\t</td><td valign='top'> Veritcally align to the bottom</td></tr><tr><td class='first' valign='top'>middle\t</td><td valign='top'> Vertically align to the middle</td></tr><table/>\nAlignment can contain combinations of these, for instance:\n\"center middle\", \"left top\", \"center top\", etc. If horizontal\nor vertical alginment is omitted it will depend on the element drawn.\nText, for instance has default vertical alignment at baseline.\n<p>",
                "return": [],
                "example": "UiAlign(\"left\")\nUiText(\"Aligned left at baseline\")\n\nUiAlign(\"center middle\")\nUiText(\"Fully centered\")"
            },
            {
                "name": "UiModalBegin",
                "args": [],
                "info": "Disable input for everything, except what's between UiModalBegin and UiModalEnd \n(or if modal state is popped)",
                "return": [],
                "example": "UiModalBegin()\nif UiTextButton(\"Okay\") then\n\t--All other interactive ui elements except this one are disabled\nend\nUiModalEnd()\n\n--This is also okay\nUiPush()\n\tUiModalBegin()\n\tif UiTextButton(\"Okay\") then\n\t\t--All other interactive ui elements except this one are disabled\n\tend\nUiPop()\n--No longer modal"
            },
            {
                "name": "UiModalEnd",
                "args": [],
                "info": "Disable input for everything, except what's between UiModalBegin and UiModalEnd\nCalling this function is optional. Modality is part of the current state and will\nbe lost if modal state is popped.",
                "return": [],
                "example": "UiModalBegin()\nif UiTextButton(\"Okay\") then\n\t--All other interactive ui elements except this one are disabled\nend\nUiModalEnd()"
            },
            {
                "name": "UiDisableInput",
                "args": [],
                "info": "Disable input",
                "return": [],
                "example": "UiPush()\n\tUiDisableInput()\n\tif UiButtonText(\"Okay\") then\n\t\t--Will never happen\n\tend\nUiPop()"
            },
            {
                "name": "UiEnableInput",
                "args": [],
                "info": "Enable input that has been previously disabled",
                "return": [],
                "example": "UiDisableInput()\nif UiButtonText(\"Okay\") then\n\t--Will never happen\nend\n\nUiEnableInput()\nif UiButtonText(\"Okay\") then\n\t--This can happen\nend"
            },
            {
                "name": "UiReceivesInput",
                "args": [],
                "info": "This function will check current state receives input. This is the case \nif input is not explicitly disabled with (with UiDisableInput) and no other\nstate is currently modal (with UiModalBegin). Input functions and UI\nelements already do this check internally, but it can sometimes be useful \nto read the input state manually to trigger things in the UI.",
                "return": [
                    {
                        "name": "receives",
                        "type": "boolean",
                        "desc": "&ndash; True if current context receives input"
                    }
                ],
                "example": "if UiReceivesInput() then\n\thighlightItemAtMousePointer()\nend"
            },
            {
                "name": "UiGetMousePos",
                "args": [],
                "info": "Get mouse pointer position relative to the cursor",
                "return": [
                    {
                        "name": "x",
                        "type": "number",
                        "desc": "&ndash; X coordinate"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "desc": "&ndash; Y coordinate"
                    }
                ],
                "example": "local x, y = UiGetMousePos()"
            },
            {
                "name": "UiIsMouseInRect",
                "args": [
                    {
                        "name": "w",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Height"
                    }
                ],
                "info": "Check if mouse pointer is within rectangle. Note that this function respects\nalignment.",
                "return": [
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "&ndash; True if mouse pointer is within rectangle"
                    }
                ],
                "example": "if UiIsMouseInRect(100, 100) then\n\t-- mouse pointer is in rectangle\nend"
            },
            {
                "name": "UiWorldToPixel",
                "args": [
                    {
                        "name": "point",
                        "type": "table",
                        "optional": false,
                        "desc": "&ndash; 3D world position as vector"
                    }
                ],
                "info": "Convert world space position to user interface X and Y coordinate relative\nto the cursor. The distance is in meters and positive if in front of camera,\nnegative otherwise.",
                "return": [
                    {
                        "name": "x",
                        "type": "number",
                        "desc": "&ndash; X coordinate"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "desc": "&ndash; Y coordinate"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "desc": "&ndash; Distance to point"
                    }
                ],
                "example": "local x, y, dist = UiWorldToPixel(point)\nif dist > 0 then\nUiTranslate(x, y)\nUiText(\"Label\")\nend"
            },
            {
                "name": "UiPixelToWorld",
                "args": [
                    {
                        "name": "x",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; X coordinate"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Y coordinate"
                    }
                ],
                "info": "Convert X and Y UI coordinate to a world direction, as seen from current camera.\nThis can be used to raycast into the scene from the mouse pointer position.",
                "return": [
                    {
                        "name": "direction",
                        "type": "table",
                        "desc": "&ndash; 3D world direction as vector"
                    }
                ],
                "example": "UiMakeInteractive()\nlocal x, y = UiGetMousePos()\nlocal dir = UiPixelToWorld(x, y)\nlocal pos = GetCameraTransform().pos\nlocal hit, dist = QueryRaycast(pos, dir, 100)\nif hit then\n\tDebugPrint(\"hit distance: \" .. dist)\nend"
            },
            {
                "name": "UiBlur",
                "args": [
                    {
                        "name": "amount",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blur amount (0.0 to 1.0)"
                    }
                ],
                "info": "Perform a gaussian blur on current screen content",
                "return": [],
                "example": "UiBlur(1.0)\ndrawMenu()"
            },
            {
                "name": "UiFont",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to TTF font file"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Font size (10 to 100)"
                    }
                ],
                "return": [],
                "example": "UiFont(\"bold.ttf\", 24)\nUiText(\"Hello\")"
            },
            {
                "name": "UiFontHeight",
                "args": [],
                "return": [
                    {
                        "name": "size",
                        "type": "number",
                        "desc": "&ndash; Font size"
                    }
                ],
                "example": "local h = UiFontHeight()"
            },
            {
                "name": "UiText",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Print text at cursor location"
                    },
                    {
                        "name": "move",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Automatically move cursor vertically. Default false."
                    }
                ],
                "return": [
                    {
                        "name": "w",
                        "type": "number",
                        "desc": "&ndash; Width of text"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "desc": "&ndash; Height of text"
                    }
                ],
                "example": "UiFont(\"bold.ttf\", 24)\nUiText(\"Hello\")\n\n...\n\n--Automatically advance cursor\nUiText(\"First line\", true)\nUiText(\"Second line\", true)"
            },
            {
                "name": "UiGetTextSize",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; A text string"
                    }
                ],
                "return": [
                    {
                        "name": "w",
                        "type": "number",
                        "desc": "&ndash; Width of text"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "desc": "&ndash; Height of text"
                    }
                ],
                "example": "\nlocal w, h = GetTextSize(\"Some text\")"
            },
            {
                "name": "UiWordWrap",
                "args": [
                    {
                        "name": "width",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Maximum width of text"
                    }
                ],
                "return": [],
                "example": "UiWordWrap(200)\nUiText(\"Some really long text that will get wrapped into several lines\")"
            },
            {
                "name": "UiTextOutline",
                "args": [
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red channel"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green channel"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue channel"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Alpha channel"
                    },
                    {
                        "name": "thickness",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Outline thickness. Default is 0.1"
                    }
                ],
                "return": [],
                "example": "--Black outline, standard thickness\nUiTextOutline(0,0,0,1)\nUiText(\"Text with outline\")"
            },
            {
                "name": "UiTextShadow",
                "args": [
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red channel"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green channel"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue channel"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Alpha channel"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Shadow distance. Default is 1.0"
                    },
                    {
                        "name": "blur",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Shadow blur. Default is 0.5"
                    }
                ],
                "return": [],
                "example": "--Black drop shadow, 50% transparent, distance 2\nUiTextShadow(0, 0, 0, 0.5, 2.0)\nUiText(\"Text with drop shadow\")"
            },
            {
                "name": "UiRect",
                "args": [
                    {
                        "name": "w",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Height"
                    }
                ],
                "info": "Draw solid rectangle at cursor position",
                "return": [],
                "example": "--Draw full-screen black rectangle\nUiColor(0, 0, 0)\nUiRect(UiWidth(), UiHeight())\n\n--Draw smaller, red, rotating rectangle in center of screen\nUiPush()\n\tUiColor(1, 0, 0)\n\tUiTranslate(UiCenter(), UiMiddle())\n\tUiRotate(GetTime())\n\tUiAlign(\"center middle\")\n\tUiRect(100, 100)\nUiPop()"
            },
            {
                "name": "UiImage",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to image (PNG or JPG format)"
                    }
                ],
                "info": "Draw image at cursor position",
                "return": [
                    {
                        "name": "w",
                        "type": "number",
                        "desc": "&ndash; Image width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "desc": "&ndash; Image height"
                    }
                ],
                "example": "--Draw image in center of screen\nUiPush()\n\tUiTranslate(UiCenter(), UiMiddle())\n\tUiAlign(\"center middle\")\n\tUiImage(\"test.png\")\nUiPop()"
            },
            {
                "name": "UiGetImageSize",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to image (PNG or JPG format)"
                    }
                ],
                "info": "Get image size",
                "return": [
                    {
                        "name": "w",
                        "type": "number",
                        "desc": "&ndash; Image width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "desc": "&ndash; Image height"
                    }
                ],
                "example": "local w,h = UiGetImageSize(\"test.png\")"
            },
            {
                "name": "UiImageBox",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to image (PNG or JPG format)"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Width"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Height"
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Border width"
                    },
                    {
                        "name": "borderHeight",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Border height"
                    }
                ],
                "info": "Draw 9-slice image at cursor position. Width should be at least 2*borderWidth.\nHeight should be at least 2*borderHeight.",
                "return": [],
                "example": "UiImageBox(\"menu-frame.png\", 200, 200, 10, 10)"
            },
            {
                "name": "UiSound",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to sound file (OGG format)"
                    },
                    {
                        "name": "volume",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Playback volume. Default 1.0"
                    },
                    {
                        "name": "pitch",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Playback pitch. Default 1.0"
                    },
                    {
                        "name": "pan",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Playback stereo panning (-1.0 to 1.0). Default 0.0."
                    }
                ],
                "info": "UI sounds are not affected by acoustics simulation. Use LoadSound / PlaySound for that.",
                "return": [],
                "example": "UiSound(\"click.ogg\")"
            },
            {
                "name": "UiSoundLoop",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to looping sound file (OGG format)"
                    },
                    {
                        "name": "volume",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Playback volume. Default 1.0"
                    }
                ],
                "info": "Call this continuously to keep playing loop. \nUI sounds are not affected by acoustics simulation. Use LoadLoop / PlayLoop for that.",
                "return": [],
                "example": "if animating then\n\tUiSoundLoop(\"screech.ogg\")\nend"
            },
            {
                "name": "UiMute",
                "args": [
                    {
                        "name": "amount",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Mute by this amount (0.0 to 1.0)"
                    },
                    {
                        "name": "music",
                        "type": "boolean",
                        "optional": true,
                        "desc": "&ndash; Mute music as well"
                    }
                ],
                "info": "Mute game audio and optionally music for the next frame. Call\ncontinuously to stay muted.",
                "return": [],
                "example": "if menuOpen then\n\tUiMute(1.0)\nend"
            },
            {
                "name": "UiButtonImageBox",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Path to image (PNG or JPG format)"
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Border width"
                    },
                    {
                        "name": "borderHeight",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Border height"
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Red multiply. Default 1.0"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Green multiply. Default 1.0"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Blue multiply. Default 1.0"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha channel. Default 1.0"
                    }
                ],
                "info": "Set up 9-slice image to be used as background for buttons.",
                "return": [],
                "example": "UiButtonImageBox(\"button-9slice.png\", 10, 10)\nif UiTextButton(\"Test\") then\n\t...\nend"
            },
            {
                "name": "UiButtonHoverColor",
                "args": [
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red multiply"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green multiply"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue multiply"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha channel. Default 1.0"
                    }
                ],
                "info": "Button color filter when hovering mouse pointer.",
                "return": [],
                "example": "UiButtonHoverColor(1, 0, 0)\nif UiTextButton(\"Test\") then\n\t...\nend"
            },
            {
                "name": "UiButtonPressColor",
                "args": [
                    {
                        "name": "r",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Red multiply"
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Green multiply"
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Blue multiply"
                    },
                    {
                        "name": "a",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Alpha channel. Default 1.0"
                    }
                ],
                "info": "Button color filter when pressing down.",
                "return": [],
                "example": "UiButtonPressColor(0, 1, 0)\nif UiTextButton(\"Test\") then\n\t...\nend"
            },
            {
                "name": "UiButtonPressDist",
                "args": [
                    {
                        "name": "dist",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Press distance"
                    }
                ],
                "info": "The button offset when being pressed",
                "return": [],
                "example": "UiButtonPressDistance(4)\nif UiTextButton(\"Test\") then\n\t...\nend"
            },
            {
                "name": "UiTextButton",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Text on button"
                    },
                    {
                        "name": "w",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Button width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Button height"
                    }
                ],
                "return": [
                    {
                        "name": "pressed",
                        "type": "boolean",
                        "desc": "&ndash; True if user clicked button"
                    }
                ],
                "example": "if UiTextButton(\"Test\") then\n\t...\nend"
            },
            {
                "name": "UiImageButton",
                "args": [
                    {
                        "name": "path",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Image path (PNG or JPG file)"
                    },
                    {
                        "name": "w",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Button width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "optional": true,
                        "desc": "&ndash; Button height"
                    }
                ],
                "return": [
                    {
                        "name": "pressed",
                        "type": "boolean",
                        "desc": "&ndash; True if user clicked button"
                    }
                ],
                "example": "if UiImageButton(\"image.png\") then\n\t...\nend"
            },
            {
                "name": "UiBlankButton",
                "args": [
                    {
                        "name": "w",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Button width"
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Button height"
                    }
                ],
                "return": [
                    {
                        "name": "pressed",
                        "type": "boolean",
                        "desc": "&ndash; True if user clicked button"
                    }
                ],
                "example": "if UiBlankButton(30, 30) then\n\t...\nend"
            },
            {
                "name": "UiSlider",
                "args": [
                    {
                        "name": "path",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Image path (PNG or JPG file)"
                    },
                    {
                        "name": "axis",
                        "type": "string",
                        "optional": false,
                        "desc": "&ndash; Drag axis, must be \"x\" or \"y\""
                    },
                    {
                        "name": "current",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Current value"
                    },
                    {
                        "name": "min",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Minimum value"
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "optional": false,
                        "desc": "&ndash; Maximum value"
                    }
                ],
                "return": [
                    {
                        "name": "value",
                        "type": "number",
                        "desc": "&ndash; New value, same as current if not changed"
                    },
                    {
                        "name": "done",
                        "type": "boolean",
                        "desc": "&ndash; True if user is finished changing (released slider)"
                    }
                ],
                "example": "value = UiSlider(\"dot.png\", \"x\", value, 0, 100)"
            },
            {
                "name": "UiGetScreen",
                "args": [],
                "return": [
                    {
                        "name": "handle",
                        "type": "number",
                        "desc": "&ndash; Handle to the screen running this script or zero if none."
                    }
                ],
                "example": "--Turn off screen running current script\nscreen = UiGetScreen()\nSetScreenEnabled(screen, false)"
            }
        ]
    }
]